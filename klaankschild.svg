<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="201.98mm"
   height="263.02463mm"
   viewBox="0 0 201.98 263.02462"
   version="1.1"
   id="svg2426"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs2423"><meshgradient
       id="meshgradient1828-6-1-4-3-6"
       gradientUnits="userSpaceOnUse"
       x="119.69842"
       y="63.614796"><meshrow
         id="meshrow1830-3-5-1-7-2"><meshpatch
           id="meshpatch1832-6-4-0-3-5"><stop
             path="c 126.049,0  252.098,0  378.146,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop1834-3-3-0-5-9" /><stop
             path="c 0,238.23  0,476.459  0,714.689"
             style="stop-color:#010202;stop-opacity:1"
             id="stop1836-5-1-7-3-3" /><stop
             path="c -126.049,0  -252.098,0  -378.146,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop1838-6-9-8-5-1" /><stop
             path="c 0,-238.23  0,-476.459  0,-714.689"
             style="stop-color:#010202;stop-opacity:1"
             id="stop1840-2-4-6-6-9" /></meshpatch></meshrow></meshgradient></defs><g
     id="layer1"
     transform="matrix(0.99999434,0,0,0.99999434,-3.8433482,-2.6986366)"><path
       fill-rule="nonzero"
       fill="rgb(100%, 100%, 100%)"
       fill-opacity="1"
       d="M 3.84337,2.6986519 V 164.68714 c 0,55.68457 45.301902,100.9864 100.98641,100.9864 55.68454,0 100.98641,-45.30183 100.98641,-100.9864 V 2.6986519 Z m 0,0"
       id="path972-3-9-7-8-2-4"
       style="clip-rule:evenodd;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2" /><path
       fill-rule="nonzero"
       fill="rgb(89.411926%, 13.725281%, 13.33313%)"
       fill-opacity="1"
       d="M 106.47754,136.36522 205.0224,39.675186 104.48885,39.873565 Z"
       id="path974-6-1-8-8-9-7"
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2" /><path
       fill-rule="nonzero"
       fill="rgb(89.411926%, 13.725281%, 13.33313%)"
       fill-opacity="1"
       d="m 104.78881,232.95853 0.0409,29.9852 c 0,0 104.60501,0.32213 99.47159,-116.8244 v -10.24767 z"
       id="path976-7-2-4-4-1-8"
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:1.01729;stroke-linejoin:round;stroke-miterlimit:2" /><path
       fill-rule="nonzero"
       fill="rgb(100%, 92.941284%, 0%)"
       fill-opacity="1"
       d="m 104.61278,137.30365 v 96.94692 l 98.06965,-95.33138 -0.74468,-96.218286 z"
       id="path978-5-7-5-3-2-4"
       style="clip-rule:evenodd;fill:#e23130;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2" /><path
       style="clip-rule:evenodd;fill:#e23130;fill-opacity:1;fill-rule:evenodd;stroke-width:0.157006;stroke-linejoin:round;stroke-miterlimit:2"
       d="m 6.2772122,90.525133 v -50.3247 H 54.957086 103.63696 v 50.3247 50.324697 c 0.0742,-0.25969 -96.9016209,2.78657 -96.7212821,2.97572 z"
       id="path1204-2-0-0-1-7-5" /><g
       aria-label="KLAANK"
       id="text1262-9-9-3-4-0-0"
       style="font-weight:bold;font-size:34.3351px;line-height:0;font-family:'Tlwg Mono';-inkscape-font-specification:'Tlwg Mono Bold';text-align:center;letter-spacing:12.5805px;text-anchor:middle;clip-rule:evenodd;fill-rule:evenodd;stroke-width:0.757397;stroke-linejoin:round;stroke-miterlimit:2"><path
         d="m 12.333521,10.369009 h 4.94573 v 9.891459 l 7.745515,-9.891459 h 5.599572 l -7.896402,9.857928 8.18141,15.172492 H 25.410365 L 19.47549,24.133225 17.279251,26.916246 v 8.483183 h -4.94573 z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path520" /><path
         d="m 47.396133,35.399429 v -25.03042 h 4.94573 v 20.671472 h 10.578831 v 4.358948 z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path517" /><path
         d="m 87.203293,14.895608 -2.330361,10.243528 h 4.677486 z m -3.017734,-4.526599 h 6.052232 l 6.756369,25.03042 h -4.945729 l -1.542397,-6.186353 h -6.622248 l -1.508867,6.186353 H 77.42919 Z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path514" /><path
         d="m 120.45527,14.895608 -2.33036,10.243528 h 4.67748 z m -3.01773,-4.526599 h 6.05223 l 6.75637,25.03042 h -4.94573 l -1.5424,-6.186353 h -6.62225 l -1.50886,6.186353 h -4.94573 z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path511" /><path
         d="m 145.37494,10.369009 h 5.31456 l 6.97432,18.190225 V 10.369009 h 4.35895 v 25.03042 h -5.28103 l -7.00785,-18.190225 v 18.190225 h -4.35895 z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path508" /><path
         d="m 178.59338,10.369009 h 4.94573 v 9.891459 l 7.74551,-9.891459 h 5.59957 l -7.8964,9.857928 8.18141,15.172492 h -5.49898 l -5.93487,-11.266204 -2.19624,2.783021 v 8.483183 h -4.94573 z"
         style="font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold'"
         id="path505" /></g><path
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:0.406685;stroke-linejoin:round;stroke-miterlimit:2"
       d="M 91.815353,261.63975 C 91.048821,263.5345 59.600825,253.55753 46.279122,243.5266 41.78275,240.14084 30.670156,230.01587 27.236187,225.60342 15.90421,211.04277 8.9172145,191.63627 7.1584856,173.58743 6.9317965,171.2603 5.2415627,162.49423 6.1501753,154.59263 l -0.3501488,-17.76911 97.6643835,0.34849 -0.53712,63.75208 v 60.67384 c -2.6375,0.9409 -13.616824,-0.95592 -11.111937,0.0418 z"
       id="path13578-2-6-1-2-3-6" /><g
       transform="matrix(-0.01799111,0,0,-0.01799111,102.88119,242.37802)"
       fill="#000000"
       stroke="none"
       id="g1670-7-0-0-0-6-1"
       style="clip-rule:evenodd;fill:#000000;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path
         d="m 3220,5285 c -47,-7 -105,-18 -130,-25 -25,-8 -53,-15 -63,-17 -9,-1 -79,-34 -155,-72 -119,-61 -151,-82 -242,-165 -58,-53 -120,-108 -137,-124 -35,-29 -120,-147 -152,-209 -10,-21 -44,-100 -76,-175 -47,-114 -61,-164 -84,-292 -16,-84 -31,-158 -35,-165 -4,-6 -24,-11 -44,-11 -23,0 -50,-10 -75,-27 l -39,-27 -39,44 c -50,58 -75,140 -90,295 -18,184 -8,293 40,470 23,83 51,170 62,195 33,70 106,178 161,236 28,30 49,56 47,58 -10,10 -199,-45 -250,-72 -97,-51 -240,-166 -356,-285 -62,-64 -113,-121 -113,-127 0,-7 -10,-26 -22,-43 -27,-38 -38,-57 -90,-162 -22,-44 -43,-87 -47,-95 -13,-25 -39,-141 -46,-205 -9,-88 10,-221 45,-305 37,-89 57,-123 133,-223 l 59,-79 -38,-61 c -21,-33 -90,-113 -154,-177 -163,-162 -178,-189 -211,-365 -6,-33 -17,-71 -24,-85 -7,-14 -23,-49 -35,-77 -13,-29 -30,-61 -39,-70 -9,-10 -28,-36 -44,-58 -15,-22 -74,-83 -131,-135 C 662,2518 584,2392 509,2171 484,2097 407,1950 376,1917 351,1889 272,1763 263,1735 c -10,-32 -5,-56 30,-138 20,-47 67,-89 160,-146 32,-19 204,-74 267,-86 8,-1 22,-5 30,-8 8,-3 64,-12 123,-20 60,-9 111,-18 114,-21 3,-3 10,-46 15,-97 5,-51 13,-100 18,-109 5,-10 7,-20 4,-22 -2,-3 5,-26 16,-52 11,-26 20,-55 20,-65 0,-14 37,-70 96,-146 31,-40 112,-221 123,-276 18,-84 1,-165 -54,-273 -25,-48 -45,-90 -43,-91 9,-8 180,30 232,51 64,27 141,93 179,154 12,19 29,43 38,54 22,23 143,257 161,311 21,60 15,185 -14,300 -40,155 -42,218 -15,377 15,89 29,144 41,156 30,34 82,35 176,3 161,-55 275,-84 331,-84 66,0 159,42 191,86 11,15 24,27 29,27 11,0 145,-266 171,-340 10,-30 23,-75 29,-99 5,-24 19,-63 29,-87 11,-23 20,-47 20,-53 0,-21 21,-21 60,-1 22,11 40,22 40,25 0,2 -9,39 -19,82 -23,97 -50,165 -105,268 -24,44 -51,104 -60,133 -17,50 -17,56 -1,105 9,29 45,111 80,182 57,118 66,145 95,290 18,88 36,168 41,177 5,9 9,21 8,25 -1,4 0,11 1,16 1,4 4,24 6,45 1,20 6,52 10,69 9,47 -7,41 -54,-20 -43,-55 -95,-160 -142,-287 -34,-92 -62,-154 -72,-158 -5,-2 -8,-8 -8,-14 0,-23 -105,-157 -153,-194 -54,-42 -176,-105 -237,-122 -89,-26 -249,-20 -305,11 -11,6 -22,12 -25,13 -6,1 -38,13 -67,25 -13,5 -23,16 -23,24 0,9 -5,25 -10,36 -10,18 -12,18 -60,-6 -65,-33 -134,-34 -161,-2 -24,29 -24,50 2,95 21,37 21,38 2,80 l -18,43 -65,-50 c -36,-27 -95,-80 -131,-118 -183,-188 -350,-353 -358,-353 -5,0 -11,-4 -13,-8 -1,-5 -22,-12 -45,-16 l -43,-6 v 32 c 0,43 18,108 30,108 6,0 10,7 10,16 0,8 50,64 112,124 l 111,109 -27,36 c -15,20 -45,47 -66,61 l -38,25 -39,-24 c -22,-14 -62,-50 -89,-81 -48,-54 -70,-91 -133,-227 -23,-49 -42,-74 -72,-95 -98,-67 -274,-16 -315,92 l -16,43 81,149 c 45,81 102,199 127,262 96,240 131,296 324,520 192,224 191,221 294,515 30,83 61,165 70,183 23,44 102,121 179,173 35,24 86,62 112,84 47,39 50,40 123,40 h 75 l 20,41 c 31,65 77,85 211,95 61,4 121,11 133,14 12,4 47,-1 80,-11 45,-15 89,-18 201,-17 79,0 145,3 149,6 3,4 -6,20 -21,37 -14,17 -26,36 -26,40 0,5 -19,15 -42,21 -24,7 -45,14 -47,16 -3,2 11,16 29,32 l 34,28 -56,17 c -31,9 -62,16 -70,16 -24,0 -58,30 -78,70 -11,22 -20,41 -20,44 0,3 20,8 44,11 31,5 77,0 143,-14 54,-12 122,-21 150,-21 h 52 l 6,-47 c 3,-27 28,-93 55,-150 28,-55 50,-107 50,-115 0,-8 -36,-32 -80,-53 -44,-21 -80,-41 -80,-43 0,-3 9,-20 21,-39 14,-22 26,-32 38,-29 9,3 63,19 119,36 174,52 469,211 562,304 25,25 49,45 54,46 5,0 15,8 22,17 7,10 15,15 19,12 3,-4 -9,-31 -28,-60 -50,-80 -65,-117 -102,-252 -41,-150 -60,-341 -50,-506 l 7,-113 31,30 30,31 51,-42 c 28,-23 53,-45 56,-48 3,-4 37,-22 75,-42 101,-50 197,-156 265,-290 35,-68 78,-103 158,-126 52,-16 77,-30 107,-62 27,-27 85,-63 177,-110 76,-38 139,-69 141,-69 11,0 16,116 6,153 -11,46 -15,49 -149,111 -30,14 -71,38 -90,54 l -35,30 18,37 c 9,20 15,40 13,44 -3,4 -24,16 -47,26 -41,19 -41,19 -35,62 l 6,43 -90,45 c -50,25 -145,84 -213,133 -68,48 -149,103 -180,122 -50,31 -57,40 -66,79 -10,49 -10,51 69,181 88,144 189,365 225,490 44,150 56,202 61,255 2,22 10,85 18,140 19,124 19,118 2,112 -8,-3 -88,-59 -178,-125 -89,-65 -225,-161 -300,-213 -75,-52 -190,-132 -255,-178 -65,-46 -123,-86 -130,-88 -20,-8 -80,46 -109,95 -68,122 -81,229 -45,369 33,126 176,394 228,426 7,4 13,13 14,20 1,23 133,110 248,164 64,30 132,63 151,73 19,10 69,25 110,34 42,8 107,23 145,31 135,32 241,45 368,45 70,0 127,3 127,8 -1,10 -212,135 -280,166 -81,36 -191,55 -383,66 -215,12 -290,11 -397,-5 z m 343,-105 c 5,-4 7,-22 5,-41 -3,-30 -7,-35 -51,-48 l -49,-15 -29,33 c -16,19 -29,36 -30,40 0,3 -2,17 -5,30 l -4,23 77,-7 c 43,-4 82,-10 86,-15 z m -264,-30 c 12,-17 29,-50 37,-73 14,-39 14,-43 -2,-52 -10,-5 -46,-29 -82,-53 -35,-24 -65,-42 -67,-40 -1,2 -16,31 -33,64 -19,37 -49,76 -74,97 l -43,36 40,17 c 41,18 104,30 166,33 29,1 39,-5 58,-29 z m -272,-115 c 39,-36 72,-73 72,-83 0,-9 3,-28 6,-42 6,-22 -3,-34 -62,-86 -88,-77 -148,-124 -160,-124 -5,0 -25,23 -43,51 -18,28 -55,79 -81,112 -27,33 -49,63 -49,66 0,4 10,13 21,21 12,8 63,45 113,82 50,36 96,67 101,67 6,0 42,-29 82,-64 z m -1138,-12 c -12,-21 -28,-45 -36,-54 -7,-8 -13,-21 -13,-27 0,-20 -25,-13 -49,12 l -22,24 33,25 c 26,20 85,51 106,56 2,1 -6,-16 -19,-36 z m -149,-141 c 19,-9 35,-22 35,-27 -2,-48 -19,-146 -26,-151 -6,-3 -29,12 -53,34 -24,22 -53,43 -64,46 -26,8 -20,28 23,79 35,41 38,42 85,19 z m 956,-93 c 16,-23 48,-62 71,-88 24,-25 46,-56 49,-68 4,-13 10,-23 14,-23 23,0 14,-45 -22,-112 -39,-74 -80,-118 -109,-118 -15,0 -261,184 -267,200 -2,5 8,28 22,52 14,24 34,61 45,83 28,60 133,142 157,123 7,-5 24,-27 40,-49 z M 1638,4679 c 2,-5 8,-9 14,-9 6,0 21,-10 33,-22 13,-13 30,-29 39,-36 23,-19 20,-28 -19,-51 -34,-20 -38,-20 -108,-6 -121,26 -121,26 -92,89 11,24 26,35 53,43 38,11 75,7 80,-8 z m -77,-173 c 47,-8 105,-24 128,-36 l 43,-21 -7,-47 c -4,-26 -8,-48 -10,-50 -2,-2 -59,0 -127,3 l -123,7 -17,40 c -16,37 -16,42 0,79 9,21 19,39 22,39 3,0 44,-6 91,-14 z m 991,-125 c 43,-34 80,-61 83,-61 3,0 17,-11 30,-24 13,-13 29,-26 35,-28 9,-3 9,-27 1,-98 -7,-52 -13,-95 -14,-96 -2,-2 -145,24 -162,29 -5,2 -50,16 -98,31 -85,27 -88,29 -105,69 -9,23 -15,47 -13,52 2,6 11,44 21,85 18,80 35,120 50,120 6,0 10,6 10,13 0,7 6,19 13,26 10,10 18,5 42,-23 17,-19 65,-62 107,-95 z m -867,-137 c 33,-8 64,-19 69,-24 5,-5 4,-25 -1,-46 -8,-38 -9,-38 -78,-52 -103,-20 -151,-17 -218,11 -37,16 -38,17 -35,64 3,41 6,48 28,54 46,13 175,9 235,-7 z m 138,-213 c 5,-5 11,-21 12,-35 2,-14 6,-29 9,-35 7,-11 -5,-20 -31,-26 -10,-2 -54,-13 -98,-24 -97,-25 -155,-26 -213,-4 -41,15 -43,18 -38,46 3,16 6,36 6,44 0,10 4,11 19,3 33,-17 99,-7 186,30 11,5 27,11 35,14 21,8 102,-2 113,-13 z m 1902,-148 c -11,-73 -17,-110 -20,-134 -7,-47 -76,-213 -127,-309 -63,-117 -114,-185 -150,-201 -16,-6 -28,-15 -28,-20 0,-5 -7,-9 -15,-9 -15,0 -20,12 -9,23 4,3 8,23 10,44 1,21 5,49 8,63 2,14 7,39 10,57 3,18 9,40 14,50 5,10 19,51 30,92 29,101 119,248 196,317 67,61 88,68 81,27 z M 1605,3770 c 3,-5 -1,-10 -9,-10 -8,0 -18,5 -21,10 -3,6 1,10 9,10 8,0 18,-4 21,-10 z m 50,-2136 c 17,-42 19,-102 4,-159 -29,-112 -31,-134 -21,-215 5,-41 6,-79 3,-85 -4,-5 -13,-29 -21,-52 -7,-24 -16,-43 -20,-43 -15,0 -23,89 -25,275 -2,105 1,206 6,226 8,32 43,89 55,89 2,0 11,-16 19,-36 z m -188,-66 c -4,-18 -11,-89 -17,-158 -14,-152 -16,-162 -36,-136 -15,22 -18,103 -8,229 6,63 10,77 28,85 34,17 39,14 33,-20 z m -114,-335 c 2,-22 6,-44 9,-49 3,-5 9,-29 13,-54 4,-25 29,-89 56,-143 l 49,-97 -22,-30 c -12,-17 -25,-30 -29,-30 -10,0 -53,68 -94,150 -35,70 -37,78 -33,150 5,68 31,160 43,148 3,-2 6,-23 8,-45 z m -48,-349 c 38,-46 76,-97 85,-112 8,-15 18,-28 23,-30 4,-2 7,-10 7,-17 0,-7 3,-15 8,-17 8,-3 72,-96 72,-104 0,-10 -41,-64 -48,-64 -8,0 -39,59 -68,130 -10,25 -48,79 -83,120 -35,41 -71,82 -78,91 -14,17 -9,90 6,88 3,0 37,-38 76,-85 z m 398,-14 c -9,-41 -21,-45 -35,-10 -10,25 -11,42 -4,67 l 11,33 17,-33 c 9,-18 14,-43 11,-57 z"
         id="path1664-0-6-6-6-0-0"
         style="fill:#000000" /><path
         d="m 1933,3379 c -111,-18 -255,-95 -306,-163 -15,-19 -34,-41 -43,-50 -18,-19 -63,-125 -68,-164 -2,-15 -7,-35 -11,-44 -4,-11 -3,-18 3,-18 6,0 28,32 48,71 26,49 50,79 76,97 l 39,25 16,-24 c 9,-13 34,-41 55,-61 21,-21 38,-39 38,-42 0,-2 -16,-10 -35,-16 -19,-6 -35,-15 -35,-20 0,-15 123,-29 175,-20 28,5 55,9 60,9 35,2 204,163 205,194 0,10 -51,-2 -68,-16 -11,-8 -19,-5 -33,13 -10,14 -19,31 -19,37 0,7 -15,30 -34,51 l -35,38 77,29 c 52,20 93,29 129,29 50,-1 52,-1 28,12 -29,15 -163,45 -192,43 -10,-1 -42,-5 -70,-10 z m -6,-266 c -14,-35 -18,-38 -52,-36 -45,3 -61,15 -68,51 -5,22 0,33 31,59 l 37,32 34,-33 34,-34 z"
         id="path1666-9-2-3-8-6-6"
         style="fill:#000000" /><path
         d="m 848,2070 c -103,-37 -133,-56 -180,-112 -53,-62 -59,-107 -25,-182 14,-31 29,-56 33,-56 24,0 106,68 138,114 29,43 126,244 126,262 0,7 -13,3 -92,-26 z"
         id="path1668-3-6-2-9-2-3"
         style="fill:#000000" /></g><g
       transform="matrix(0.01487472,-0.01487472,-0.01487472,-0.01487472,278.58367,196.87926)"
       fill="#000000"
       stroke="none"
       id="g2509-0-8-0-2-6-2"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" /><g
       transform="matrix(-0.03674095,0,0,-0.03674095,99.975014,131.72727)"
       fill="#000000"
       stroke="none"
       id="g2551-6-2-5-4-7-1"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" /><g
       id="g1141-2-4-5-2-5"
       transform="matrix(0.19622241,0,0,0.19622241,94.455538,60.550386)"
       style="clip-rule:evenodd;fill:url(#meshgradient1828-6-1-4-3-6);fill-opacity:1;fill-rule:nonzero;stroke-linejoin:round;stroke-miterlimit:2"><g
         id="g1115-3-7-0-0-4"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero"><g
           id="g1113-7-6-4-2-7"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero"><path
             class="st0"
             d="m 261.69,403.06 c 1.12,-1.37 2.25,-2.74 3.4,-4.08 0.56,-0.66 1.13,-1.3 1.7,-1.96 0.16,-0.19 1.59,-1.78 0.38,-0.45 2.17,-2.39 4.43,-4.71 6.74,-6.95 2.17,-2.1 4.4,-4.14 6.69,-6.11 -1.75,1.51 0.69,-0.53 1.27,-1 1.22,-0.97 2.45,-1.91 3.71,-2.83 1.08,-0.79 2.17,-1.55 3.28,-2.3 0.61,-0.41 3.69,-2.26 1.57,-1.04 2.13,-1.23 4.24,-2.47 6.43,-3.57 1.05,-0.53 2.12,-1.01 3.18,-1.51 0.37,-0.18 1.8,-0.76 -0.05,0 0.39,-0.16 0.78,-0.32 1.18,-0.47 2.17,-0.83 4.36,-1.6 6.6,-2.24 1.01,-0.29 2.03,-0.55 3.06,-0.79 0.5,-0.12 1.01,-0.23 1.52,-0.34 -0.13,0.03 -1.31,0.24 -0.33,0.07 2.09,-0.36 4.19,-0.64 6.3,-0.8 1.8,-0.13 3.61,-0.18 5.42,-0.15 0.95,0.02 1.89,0.07 2.84,0.12 0.17,0.01 1.63,0.13 0.81,0.05 -0.74,-0.07 1.19,0.15 1.14,0.14 7.22,0.98 14.2,3.36 20.58,6.86 2.48,1.36 5.34,3.29 8.16,5.53 2.86,2.27 5.54,4.75 8.05,7.41 2.52,2.68 4.86,5.53 7.01,8.52 1.81,2.52 4.2,6.3 5.25,8.24 3.49,6.44 6.18,13.33 7.98,20.43 0.88,3.46 1.54,6.98 1.96,10.53 0.1,0.87 0.19,1.75 0.26,2.63 0.07,0.84 0,-0.13 -0.01,-0.25 0.03,0.43 0.05,0.87 0.07,1.31 0.05,1.25 0.08,2.5 0.05,3.74 -0.09,3.61 -0.58,7.21 -1.21,10.75 -0.18,1.03 -0.38,2.05 -0.59,3.07 -0.12,0.57 -0.26,1.14 -0.37,1.71 -0.23,1.19 0.54,-2.16 -0.06,0.23 -0.61,2.42 -1.26,4.82 -1.99,7.2 -0.82,2.65 -1.72,5.28 -2.7,7.87 -0.51,1.35 -1.05,2.7 -1.61,4.04 -0.28,0.68 -0.58,1.36 -0.87,2.03 -0.54,1.22 -0.69,2.08 -0.05,0.17 -0.94,2.8 -2.74,5.58 -4.2,8.15 -0.77,1.36 -1.57,2.7 -2.39,4.02 -0.36,0.58 -0.74,1.16 -1.11,1.74 -1.27,1.99 1.52,-2.11 -0.17,0.26 -1.87,2.6 -3.82,5.12 -5.89,7.56 -1.97,2.31 1.35,-1.38 0.14,-0.14 -0.56,0.58 -1.11,1.18 -1.68,1.75 -1.14,1.16 -2.32,2.29 -3.54,3.37 -0.86,0.77 -3.07,2.02 0.13,-0.07 -0.68,0.44 -1.29,1.05 -1.93,1.54 -1.32,1.02 -2.67,1.97 -4.04,2.91 -0.21,0.15 -0.97,0.52 -1.05,0.69 0.05,-0.11 2.52,-1.51 0.9,-0.56 -0.73,0.42 -1.45,0.87 -2.19,1.28 -1.5,0.84 -3.02,1.62 -4.58,2.34 -0.69,0.32 -3.26,1.24 -0.58,0.29 -0.73,0.26 -1.43,0.57 -2.16,0.84 -1.79,0.66 -3.61,1.25 -5.45,1.77 -0.89,0.25 -1.78,0.48 -2.67,0.69 -0.44,0.1 -2.56,0.56 -1.64,0.38 0.94,-0.19 -1.7,0.29 -2.06,0.34 -1.08,0.17 -2.17,0.31 -3.26,0.43 -8.61,0.95 -16.67,0.49 -24.82,-0.99 -34.7,-6.3 -71.75,-25.48 -88.9,-56.84 -3.75,-6.85 -6.54,-14.25 -8.39,-21.83 -1.97,-8.05 -2.72,-14.97 -2.68,-22.58 0.04,-8.31 1.04,-16.61 2.79,-24.74 0.12,-0.54 0.23,-1.07 0.36,-1.61 -0.32,1.4 0,0.02 0.06,-0.22 0.28,-1.08 0.55,-2.16 0.84,-3.23 0.59,-2.18 1.24,-4.35 1.93,-6.5 1.43,-4.44 3.06,-8.82 4.86,-13.12 0.46,-1.11 0.94,-2.21 1.42,-3.3 0.24,-0.55 0.49,-1.1 0.74,-1.65 -0.17,0.37 -0.81,1.68 0.05,-0.1 1.07,-2.23 2.16,-4.44 3.31,-6.63 2.37,-4.52 4.91,-8.96 7.6,-13.3 1.39,-2.24 2.83,-4.45 4.29,-6.65 -1.18,1.76 0.53,-0.75 0.91,-1.29 0.88,-1.25 1.76,-2.5 2.66,-3.73 3.03,-4.16 6.21,-8.21 9.43,-12.23 12.07,-15.09 24.52,-29.87 36.92,-44.69 25.54,-30.54 51.25,-61.13 73.27,-94.36 9.14,-13.78 17.59,-28.18 23.74,-43.57 4.69,-11.72 8.06,-24.61 6.27,-37.3 -1.6,-11.35 -8.67,-20.13 -18.34,-25.82 -9.02,-5.31 -20.51,-9.01 -31.11,-8.51 -18.79,0.89 -33.83,15.95 -42.28,31.62 -10.11,18.74 -14.31,40.39 -17.12,61.3 -3.63,27.05 -4.52,54.45 -4.58,81.71 -0.07,31.03 1.14,62.06 2.87,93.04 1.74,31.2 4.05,62.37 6.5,93.52 2.09,26.56 4.35,53.11 6.17,79.7 0.05,0.71 0.1,1.43 0.15,2.14 0.09,1.33 -0.09,-1.35 0.03,0.5 0.1,1.47 0.19,2.94 0.29,4.41 0.17,2.66 0.33,5.31 0.48,7.97 0.28,4.86 0.52,9.71 0.71,14.57 0.48,12.33 0.67,24.68 -1.63,36.87 -0.19,1.01 -0.4,2.01 -0.61,3.01 -0.21,0.98 0.06,-0.22 0.09,-0.35 -0.12,0.48 -0.24,0.97 -0.36,1.45 -0.51,2 -1.09,3.99 -1.74,5.95 -0.55,1.67 -1.15,3.33 -1.8,4.97 -0.34,0.85 -0.69,1.7 -1.06,2.54 -0.18,0.42 -0.37,0.83 -0.55,1.24 0.42,-0.96 0.75,-1.54 0.09,-0.25 -0.75,1.47 -1.5,2.94 -2.32,4.38 -0.43,0.75 -0.87,1.49 -1.32,2.23 -0.28,0.46 -2.04,3.11 -0.91,1.46 1.11,-1.61 -0.31,0.43 -0.62,0.85 -0.49,0.67 -0.99,1.34 -1.5,2 -0.51,0.65 -1.02,1.3 -1.55,1.93 -0.37,0.45 -2.52,2.86 -0.92,1.12 1.54,-1.68 -0.17,0.17 -0.57,0.58 -0.56,0.58 -1.12,1.15 -1.7,1.71 -0.57,0.56 -1.15,1.1 -1.74,1.64 -0.43,0.39 -2.84,2.47 -1,0.92 1.76,-1.48 -0.14,0.1 -0.59,0.46 -0.61,0.49 -1.23,0.96 -1.86,1.43 -1.25,0.93 -2.53,1.8 -3.82,2.67 -2.37,1.61 1.66,-0.95 0.05,-0.03 -0.67,0.38 -1.32,0.78 -1.99,1.16 -1.33,0.75 -2.68,1.47 -4.05,2.14 -1.06,0.52 -3.35,1.04 -4.13,1.9 0.08,-0.09 2.4,-0.96 0.85,-0.37 -0.35,0.13 -0.7,0.28 -1.05,0.42 -0.7,0.27 -1.4,0.54 -2.11,0.79 -2.8,1.01 -5.65,1.87 -8.53,2.6 -1.42,0.36 -2.86,0.67 -4.3,0.97 1.61,-0.34 0.8,-0.16 -0.21,0.02 -0.8,0.14 -1.61,0.27 -2.41,0.38 -5.57,0.81 -11.21,1.12 -16.83,0.89 -1.35,-0.05 -2.69,-0.15 -4.04,-0.26 -0.25,-0.02 -0.5,-0.05 -0.75,-0.07 -0.99,-0.08 1.38,0.17 0.4,0.04 -0.73,-0.1 -1.47,-0.18 -2.2,-0.28 -2.52,-0.36 -5.02,-0.83 -7.49,-1.44 -4.51,-1.11 -8.94,-2.66 -13.06,-4.82 -0.48,-0.25 -0.94,-0.52 -1.41,-0.77 -1,-0.54 1.2,0.82 -0.1,-0.05 -0.9,-0.61 -1.81,-1.18 -2.68,-1.84 -1.53,-1.16 -2.97,-2.44 -4.26,-3.86 -0.57,-0.63 -1.11,-1.29 -1.62,-1.98 -0.43,-0.59 -1.84,-3.21 -0.87,-1.2 -1.59,-3.31 -2.99,-6.84 -3.27,-10.54 0.1,1.26 0.06,-0.62 0.08,-1.02 0.03,-0.37 0.51,-2.82 0.14,-1.49 -0.43,1.57 0.33,-0.99 0.41,-0.97 0.31,0.07 -1.19,2.22 -0.42,0.98 1.05,-1.72 -1.41,1.93 -0.7,0.96 1.6,-2.2 -0.7,0.68 -0.54,0.52 1.8,-1.77 -2.36,2.28 -0.61,0.5 0.17,-0.17 0.41,-0.27 0.59,-0.42 1.21,-1.01 -1.22,0.77 -1.29,0.79 0.59,-0.15 1.32,-0.7 1.87,-1 1.89,-1.04 -2.32,0.8 -0.33,0.12 0.48,-0.16 0.95,-0.35 1.42,-0.51 1.04,-0.35 2.1,-0.59 3.16,-0.88 2.13,-0.58 -2.25,0.27 0.23,-0.04 0.44,-0.06 0.89,-0.11 1.33,-0.18 0.63,-0.09 -1.76,-0.31 -0.17,0.01 1.19,0.24 2.43,0.34 3.63,0.52 2.86,0.43 5.72,0.91 8.57,1.44 5.1,0.95 10.16,2.07 15.18,3.37 9.13,2.37 18.11,5.36 26.79,9.08 14.55,6.24 27.56,14.23 39.34,24.98 19.51,17.8 31.8,39.44 37.67,65.03 1.24,5.39 2.15,10.86 2.72,16.37 0.13,1.23 0.22,2.46 0.33,3.69 0.16,1.83 -0.04,-1 0.02,0.3 0.04,0.8 0.09,1.6 0.12,2.39 0.1,2.47 0.14,4.95 0.1,7.42 -0.07,4.45 -0.38,8.9 -0.97,13.31 -0.27,2 -0.6,3.99 -1,5.97 -0.09,0.47 -0.2,0.93 -0.3,1.4 -0.35,1.74 0.51,-1.9 0.16,-0.67 -0.26,0.91 -0.46,1.83 -0.72,2.74 -0.22,0.76 -0.45,1.51 -0.69,2.25 -0.24,0.73 -0.5,1.46 -0.78,2.18 -0.19,0.5 -1.43,3.15 -0.68,1.71 0.83,-1.59 -0.49,0.87 -0.66,1.16 -0.31,0.55 -0.76,1.08 -1,1.66 1.17,-2.77 0.95,-1.46 0.14,-0.34 -1.68,2.3 1.83,-2.1 0.38,-0.41 -1.43,1.67 0.1,-0.05 0.93,-0.72 -0.22,0.18 -0.46,0.37 -0.7,0.53 -1.33,0.86 1.54,-0.87 1.43,-0.86 -0.29,0.02 -1.21,0.62 -1.46,0.79 -1,0.67 2.71,-0.76 0.34,-0.22 -2.04,0.47 0.4,-0.13 0.47,-0.02 -0.04,-0.06 -1.43,0.18 -1.57,0.19 -0.53,0.04 -1.06,0 -1.59,0.02 -1.75,0.07 1.02,0.33 -0.34,-0.04 -2.31,-0.63 -4.34,-1.29 -6.51,-2.34 -1.32,-0.64 0.54,0.42 -0.39,-0.23 -0.53,-0.37 -1.08,-0.73 -1.6,-1.12 -1.1,-0.82 -2.15,-1.71 -3.14,-2.65 -2.2,-2.08 -4.16,-4.41 -5.91,-6.88 -2.25,-3.17 -3.12,-4.74 -4.65,-7.98 -7.47,-15.91 -8.93,-33.26 -6.49,-50.36 1.53,-10.73 4.76,-20.96 9.29,-31.26 1.61,-3.66 4.43,-8.95 6.92,-13.14 1.19,-2.01 2.47,-3.96 3.72,-5.93 0.9,-1.42 -1.08,1.53 -0.11,0.16 0.35,-0.49 0.69,-1 1.04,-1.49 0.78,-1.1 1.58,-2.19 2.39,-3.27 1.33,-1.76 2.7,-3.49 4.11,-5.18 0.74,-0.89 1.5,-1.76 2.25,-2.63 0.27,-0.31 0.54,-0.69 0.85,-0.96 -2.45,2.15 -0.37,0.42 0.15,-0.12 0.79,-0.84 9.12,-9.49 9.56,-9.12 0.01,0.01 -2.44,2.01 -0.62,0.52 0.31,-0.25 0.62,-0.51 0.93,-0.76 0.82,-0.66 1.65,-1.32 2.49,-1.96 1.75,-1.34 3.53,-2.64 5.35,-3.88 0.74,-0.5 1.48,-0.99 2.22,-1.48 2.39,-1.58 -1.75,1.02 0.7,-0.44 1.8,-1.07 3.61,-2.12 5.47,-3.11 1.59,-0.85 3.21,-1.66 4.84,-2.43 0.75,-0.35 1.5,-0.7 2.26,-1.04 0.43,-0.19 0.86,-0.37 1.29,-0.56 -2.54,1.13 -0.3,0.14 0.17,-0.05 3.25,-1.29 6.56,-2.43 9.93,-3.38 1.57,-0.44 3.15,-0.85 4.73,-1.21 0.7,-0.16 2.85,-0.59 0.91,-0.22 0.92,-0.18 1.85,-0.34 2.78,-0.49 3.17,-0.51 6.38,-0.84 9.59,-0.97 3.01,-0.12 6.02,-0.04 9.02,0.21 1.04,0.08 -1.29,-0.16 -0.26,-0.03 0.35,0.05 0.71,0.08 1.06,0.13 0.61,0.09 1.22,0.17 1.83,0.27 1.44,0.24 2.87,0.53 4.28,0.89 2.52,0.63 4.99,1.45 7.36,2.5 1.06,0.47 2.08,1 3.1,1.54 1.53,0.81 -0.26,-0.24 0.51,0.3 0.54,0.38 1.1,0.73 1.64,1.12 1.85,1.35 3.55,2.9 5.03,4.64 0.68,0.8 1.32,1.64 1.9,2.51 0.31,0.47 0.59,0.95 0.88,1.43 -0.73,-1.22 -0.11,-0.2 0.17,0.41 0.95,2.12 1.67,4.29 2.08,6.58 0.11,0.59 0.18,1.19 0.26,1.79 0.26,1.9 0.07,-0.65 0.05,0.43 -0.03,1.42 0.02,2.82 -0.12,4.24 -0.08,0.77 -0.23,1.52 -0.33,2.28 -0.16,1.24 0.63,-1.67 -0.15,0.38 -0.11,0.3 -0.26,0.64 -0.34,0.94 -0.3,1.12 -0.7,-0.31 0.51,-1.05 -0.12,0.07 -0.25,0.5 -0.33,0.62 -0.96,1.57 0.62,-0.83 0.8,-1.08 -0.17,0.24 -0.34,0.5 -0.54,0.72 -1.14,1.3 1.43,-1.53 1.29,-1.39 -1.83,1.82 2,-1.5 0.83,-0.62 -1.73,1.3 1.21,-0.6 0.86,-0.47 -0.22,0.08 -1.62,1.04 -1.79,0.91 -0.5,-0.39 2.57,-0.87 1.14,-0.51 -0.29,0.07 -0.59,0.2 -0.88,0.29 -0.61,0.19 -1.23,0.3 -1.84,0.49 1.43,-0.43 1.22,-0.18 0.03,-0.04 -0.76,0.09 -1.52,0.19 -2.28,0.24 -1.43,0.1 -2.86,0.12 -4.29,0.08 -0.65,-0.02 -1.3,-0.05 -1.95,-0.1 -0.38,-0.03 -0.76,-0.06 -1.13,-0.09 -0.88,-0.07 1.26,0.16 -0.13,-0.01 -12.61,-1.62 -24.8,-5.92 -36.45,-10.88 -7.41,-3.15 -14.44,-6.85 -21.59,-10.53 -14.91,-7.69 -30.09,-14.82 -45.18,-22.13 -32.11,-15.57 -64.32,-31.86 -92.41,-54.12 -27.54,-21.82 -50.2,-49.63 -59.01,-84.15 -4.71,-18.44 -6.11,-37.83 -5.13,-56.77 0.46,-8.9 1.54,-17.78 3.31,-26.52 0.22,-1.08 0.45,-2.16 0.69,-3.23 0.3,-1.38 -0.28,1.16 0.05,-0.21 0.13,-0.53 0.26,-1.06 0.39,-1.59 0.53,-2.11 1.09,-4.21 1.7,-6.29 1.21,-4.12 2.58,-8.19 4.11,-12.2 0.71,-1.86 1.46,-3.71 2.25,-5.54 0.42,-0.97 0.85,-1.94 1.28,-2.91 0.76,-1.71 0.04,-0.09 -0.1,0.22 0.29,-0.6 0.57,-1.19 0.86,-1.79 1.85,-3.79 3.86,-7.5 6.02,-11.12 1.01,-1.7 2.06,-3.37 3.13,-5.03 0.25,-0.38 0.55,-0.97 0.87,-1.32 -1.64,1.78 -0.76,1.1 -0.32,0.48 0.68,-0.97 1.36,-1.95 2.05,-2.91 2.49,-3.43 5.11,-6.76 7.87,-9.98 0.61,-0.71 1.23,-1.41 1.84,-2.11 1.54,-1.76 -0.5,0.62 -0.55,0.6 0.03,0.01 0.95,-1.03 1.09,-1.18 1.56,-1.67 3.16,-3.31 4.79,-4.91 1.45,-1.43 2.93,-2.83 4.43,-4.2 0.81,-0.74 1.62,-1.46 2.44,-2.19 0.41,-0.36 0.83,-0.72 1.24,-1.08 1.72,-1.52 -1.48,1.18 -0.26,0.21 3.38,-2.69 6.72,-5.4 10.23,-7.92 1.84,-1.32 3.7,-2.61 5.59,-3.86 0.95,-0.63 1.92,-1.25 2.87,-1.87 0.46,-0.3 1.85,-1.14 -0.31,0.19 0.49,-0.3 0.98,-0.61 1.48,-0.91 8.14,-4.96 16.62,-9.35 25.33,-13.2 1.13,-0.5 2.26,-0.99 3.39,-1.47 -1.83,0.77 1.53,-0.61 1.9,-0.76 2.34,-0.94 4.69,-1.85 7.06,-2.72 4.85,-1.79 9.76,-3.43 14.7,-4.94 9.76,-2.98 17.15,-4.87 26.75,-5.75 3.7,-0.34 7.43,-0.47 11.14,-0.28 0.83,0.04 1.66,0.1 2.49,0.18 -1.43,-0.13 0.28,0.05 0.79,0.12 1.56,0.22 3.12,0.51 4.65,0.89 2.55,0.63 5.05,1.5 7.41,2.67 0.54,0.27 1.06,0.56 1.58,0.85 -1.06,-0.6 -0.39,-0.25 0.23,0.18 0.96,0.68 1.9,1.39 2.77,2.18 1.57,1.43 2.79,3.06 3.99,4.79 0.75,1.07 0,-0.04 0.04,0.03 0.21,0.46 0.45,0.9 0.65,1.37 0.43,0.98 0.78,2 1.07,3.03 0.25,0.92 0.45,1.86 0.6,2.8 0.07,0.44 0.08,0.91 0.17,1.34 0.24,1.09 -0.03,-0.6 -0.03,-0.72 0.01,0.39 0.05,0.78 0.05,1.18 0,2.09 -0.15,4.16 -0.53,6.22 -0.06,0.34 -0.58,2.38 -0.13,0.74 0.45,-1.66 -0.14,0.43 -0.23,0.75 -0.32,1.11 -0.69,2.2 -1.11,3.28 -0.21,0.55 -0.45,1.09 -0.67,1.63 -0.79,1.99 1,-1.94 0.26,-0.55 -0.61,1.14 -1.19,2.29 -1.85,3.41 -0.32,0.53 -0.66,1.05 -0.98,1.58 -1.22,1.99 1.52,-2.05 0.47,-0.69 -0.83,1.07 -1.61,2.17 -2.48,3.21 -0.34,0.41 -2.1,2.38 -0.36,0.45 1.63,-1.81 0.16,-0.19 -0.26,0.24 -0.99,1.01 -2.03,1.95 -3.07,2.91 -1.86,1.72 2.57,-1.99 0.52,-0.46 -0.47,0.36 -0.93,0.73 -1.41,1.09 -0.55,0.41 -1.1,0.81 -1.67,1.2 -0.44,0.3 -2.81,1.84 -0.92,0.64 1.87,-1.19 -0.11,0.04 -0.54,0.29 -0.61,0.35 -1.23,0.69 -1.85,1.01 -0.63,0.33 -1.26,0.64 -1.9,0.95 -0.53,0.25 -2.9,0.99 -1.25,0.58 1.75,-0.43 -0.37,0.13 -0.81,0.29 -0.69,0.25 -1.38,0.5 -2.07,0.72 -1.5,0.49 -3.02,0.92 -4.56,1.28 -0.94,0.22 -1.94,0.38 -0.29,0.09 -0.76,0.13 -1.51,0.27 -2.27,0.38 -1.65,0.24 -3.3,0.4 -4.97,0.5 -9.29,0.53 -18.56,-0.11 -27.64,-1.84 -17.5,-3.34 -34.03,-10.73 -47.31,-22.69 -13.12,-11.83 -22.24,-27.08 -27.09,-44.02 -1.31,-4.59 -2.32,-9.27 -3.05,-13.98 -0.74,-4.8 -1.08,-7.85 -0.97,-12.28 0.11,-4.14 0.63,-8.26 1.52,-12.3 -0.35,1.6 0.21,-0.75 0.33,-1.22 0.28,-1.01 0.58,-2.01 0.9,-3.01 0.69,-2.13 1.47,-4.23 2.35,-6.29 0.16,-0.36 0.34,-0.72 0.48,-1.09 0.52,-1.37 -0.8,1.5 -0.09,0.21 0.51,-0.94 0.95,-1.92 1.46,-2.86 1.08,-2.02 2.28,-3.98 3.5,-5.92 1.1,-1.73 -1.29,1.74 0.42,-0.59 0.65,-0.89 1.29,-1.77 1.97,-2.64 0.59,-0.76 1.2,-1.52 1.81,-2.26 0.35,-0.43 0.72,-0.84 1.07,-1.27 1.79,-2.15 -1.36,1.39 -0.21,0.21 1.57,-1.61 3.1,-3.24 4.75,-4.77 0.72,-0.68 1.47,-1.33 2.21,-1.99 1.69,-1.51 -0.38,0.22 -0.51,0.42 0.31,-0.47 1.21,-0.98 1.67,-1.34 1.7,-1.33 3.44,-2.61 5.22,-3.82 0.7,-0.47 3.34,-2.11 1.16,-0.8 1.13,-0.68 2.26,-1.35 3.41,-1.99 1.94,-1.08 3.91,-2.09 5.91,-3.03 0.42,-0.2 3.6,-1.57 1.68,-0.78 1.25,-0.52 2.52,-1 3.79,-1.47 4.29,-1.56 9.66,-3.09 13.53,-3.81 9,-1.7 19.98,-2.09 29.69,-0.72 11.69,1.64 23.05,5.27 33.69,10.36 11.52,5.5 22.16,12.45 34,17.35 19.35,8.02 40.35,12.38 61.34,11.62 16.91,-0.61 33.42,-4.7 48.93,-11.35 15.07,-6.46 30.6,-15.77 42,-27.78 2.42,-2.56 8.04,-9.06 4.49,-12.74 -3.39,-3.51 -10.62,1.66 -12.89,4.05 -0.92,0.97 -1.92,1.88 -2.91,2.77 -0.51,0.46 -1.04,0.91 -1.56,1.37 -1.59,1.41 2.62,-2.15 1.32,-1.11 -0.43,0.34 -0.84,0.7 -1.26,1.04 -1.65,1.33 -3.33,2.61 -5.05,3.85 -2.07,1.49 -4.3,2.78 -6.35,4.3 -0.02,0.01 2.68,-1.64 1.21,-0.76 -0.3,0.18 -0.59,0.36 -0.88,0.54 -0.6,0.37 -1.21,0.73 -1.82,1.09 -1.36,0.79 -2.73,1.56 -4.12,2.3 -2.91,1.56 -5.89,2.99 -8.9,4.35 -0.38,0.17 -0.77,0.33 -1.16,0.51 0.19,-0.08 2.26,-0.92 0.64,-0.27 -0.81,0.32 -1.61,0.66 -2.42,0.97 -1.78,0.69 -3.57,1.34 -5.37,1.95 -3.7,1.25 -7.46,2.33 -11.27,3.23 -0.96,0.23 -1.93,0.43 -2.9,0.65 -1.62,0.37 -0.34,0.08 -0.01,0.01 -0.5,0.1 -1,0.19 -1.5,0.28 -2.3,0.41 -4.6,0.76 -6.92,1.04 -8.89,1.08 -18.29,1.23 -26.98,0.37 -24.15,-2.4 -46.14,-12.11 -67.05,-23.91 -20.77,-11.72 -44.99,-17.84 -68.85,-15.16 -22.51,2.53 -43.31,12.21 -60.43,26.91 -15,12.87 -27.27,30.41 -32,49.78 -4.62,18.95 -1.47,39.2 5.96,57.06 7.07,17.01 18.51,32.03 33.64,42.62 16.33,11.43 35.14,17.36 54.89,19.14 16.08,1.45 31.94,0 46.28,-7.93 12.38,-6.85 23.37,-17.22 30.06,-29.77 5.04,-9.46 8.41,-21.1 5.11,-31.71 -3.15,-10.11 -11.98,-16.54 -21.99,-19.01 -17.07,-4.22 -35.66,-0.15 -52.11,4.75 -20.17,6.01 -39.93,14.17 -58,25.03 -34.1,20.5 -62.12,49.8 -77.72,86.69 -15.04,35.59 -17.12,77.15 -9.02,114.72 7.89,36.58 30.89,67.06 59.53,90.29 29.31,23.78 63.37,41.08 97.17,57.48 15.66,7.6 31.42,14.98 46.87,23 7.4,3.84 14.74,7.58 22.45,10.77 12.53,5.18 25.68,9.54 39.29,10.45 16.16,1.08 32.99,-7.92 37.94,-24.12 3.4,-11.13 1.08,-23.99 -7.32,-32.32 -8.3,-8.23 -20.18,-11.22 -31.5,-11.91 -33.43,-2.02 -66.97,17.37 -89.15,41.01 -29.67,31.63 -50.28,78.37 -39.45,122.1 3.25,13.13 9.94,27.81 21.54,35.61 4.79,3.22 10.15,5.4 16.05,4.93 7.76,-0.62 14.87,-5.07 20.19,-10.54 16.27,-16.72 17.69,-43.21 15.64,-65.17 -2.35,-25.23 -11.85,-49.77 -27.39,-69.82 -21.16,-27.3 -52.94,-44.13 -86.03,-52.33 -5.08,-1.26 -10.21,-2.34 -15.37,-3.24 -4.24,-0.75 -9.14,-2.11 -13.44,-1.89 -4.86,0.25 -9.92,2.09 -14.29,4.09 -8.47,3.87 -16.27,11.31 -19.46,20.16 -2.87,7.94 -1.02,16.62 3.19,23.71 4.47,7.53 12.82,12.27 20.85,15.17 10.56,3.8 22.27,4.92 33.42,4.24 29.03,-1.77 57.21,-16.53 74.34,-40.2 10.32,-14.25 16.5,-30.73 18.68,-48.17 1.45,-11.6 0.92,-23.36 0.38,-35.01 -1.15,-25 -3.24,-49.95 -5.22,-74.89 -2.45,-30.68 -4.94,-61.36 -7,-92.07 0.06,0.91 -0.09,-1.32 -0.12,-1.8 -0.07,-0.98 -0.13,-1.97 -0.19,-2.95 -0.14,-2.09 -0.27,-4.19 -0.4,-6.28 -0.26,-4.08 -0.51,-8.15 -0.75,-12.23 -0.48,-8.17 -0.93,-16.34 -1.32,-24.52 -0.79,-16.29 -1.4,-32.58 -1.73,-48.89 -0.6,-29.76 -0.42,-59.62 2.15,-89.29 1.07,-12.4 2.58,-24.78 4.93,-37 0.26,-1.34 0.53,-2.69 0.81,-4.03 0.14,-0.66 0.28,-1.32 0.42,-1.97 0.15,-0.68 0.82,-3.46 0.15,-0.71 0.61,-2.48 1.21,-4.97 1.9,-7.43 1.32,-4.74 2.83,-9.42 4.66,-13.99 0.38,-0.95 0.77,-1.89 1.18,-2.82 0.21,-0.49 0.44,-0.97 0.65,-1.46 0.57,-1.33 -0.66,1.4 -0.61,1.31 0.19,-0.33 0.33,-0.71 0.5,-1.05 0.92,-1.84 1.86,-3.66 2.91,-5.42 0.48,-0.81 1.01,-1.6 1.5,-2.41 1.07,-1.73 -1.9,2.61 -0.68,1.01 0.31,-0.4 0.59,-0.83 0.9,-1.24 0.53,-0.71 1.07,-1.4 1.64,-2.08 0.28,-0.33 0.57,-0.65 0.84,-0.98 1.02,-1.26 -2.76,2.86 -0.97,1.1 0.59,-0.58 1.18,-1.16 1.78,-1.74 2.12,-2.03 -2.82,2.1 -0.26,0.22 0.64,-0.47 1.29,-0.92 1.92,-1.38 1.65,-1.2 -2.61,1.47 -1.26,0.79 0.39,-0.2 0.75,-0.44 1.14,-0.64 0.67,-0.36 1.42,-0.63 2.07,-1.01 -2.81,1.64 -1.36,0.54 0.14,0.05 0.74,-0.24 1.48,-0.42 2.23,-0.62 1.61,-0.43 -0.18,0.37 -0.78,0.14 0.3,0.11 1.13,-0.18 1.46,-0.22 1.61,-0.21 3.23,-0.28 4.85,-0.23 0.99,0.03 3.27,0.43 0.98,0.01 0.98,0.18 1.98,0.27 2.96,0.45 6.55,1.26 13.13,3.41 19.01,6.58 0.36,0.19 2.12,1.24 0.98,0.53 0.61,0.38 1.2,0.76 1.79,1.17 1.19,0.82 2.34,1.71 3.43,2.66 1.97,1.72 3.75,3.67 5.24,5.82 0.35,0.5 0.67,1.02 1,1.54 0.93,1.45 -0.09,-0.32 0.3,0.53 0.54,1.17 1.08,2.33 1.51,3.54 0.85,2.41 1.4,4.91 1.69,7.45 0.09,0.75 0.12,2.12 0.07,0.51 0.02,0.66 0.05,1.31 0.06,1.96 0.01,1.52 -0.05,3.05 -0.18,4.56 -0.25,2.9 -0.79,5.73 -1.37,8.58 0.49,-2.41 -0.02,0 -0.18,0.6 -0.2,0.76 -0.41,1.52 -0.64,2.27 -0.52,1.76 -1.09,3.5 -1.7,5.23 -1.2,3.39 -2.59,6.71 -4.04,9.99 -1.03,2.33 0.61,-1.23 -0.19,0.43 -0.41,0.84 -0.81,1.69 -1.22,2.53 -0.96,1.94 -1.95,3.87 -2.96,5.77 -1.96,3.68 -4.03,7.31 -6.18,10.9 -2.27,3.8 -4.63,7.54 -7.04,11.25 -0.6,0.93 -1.21,1.85 -1.83,2.77 -0.42,0.63 -2.32,3.44 -0.69,1.05 -1.37,2 -2.74,4 -4.13,5.99 -23.61,33.69 -50.6,64.91 -76.93,96.46 -26.82,32.14 -54.8,64.65 -66.82,105.64 -9.95,33.91 -7.63,70.79 14.62,99.44 11.4,14.68 26.93,25.66 43.57,33.69 18.51,8.93 39.39,15.36 60.09,15.39 34.27,0.04 63.16,-21.33 80.13,-50 11.13,-18.81 19.32,-42.25 17.56,-64.37 -2.39,-30.09 -22.08,-60.81 -50.83,-71.78 -41.74,-15.93 -82.26,17.21 -106.98,47.48 -2.03,2.49 -5.83,9.51 -0.91,11.21 4.83,1.69 10.92,-4.03 13.58,-7.28 z"
             id="path1111-5-5-8-3-6"
             style="fill:#010202;fill-opacity:1;fill-rule:nonzero" /></g></g><g
         id="g1121-9-6-7-7-5"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero"><g
           id="g1119-2-9-1-5-6"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero"><path
             class="st0"
             d="m 450.93,194.12 c -0.03,2.56 -0.05,5.12 -0.08,7.68 -0.07,6.91 -0.14,13.81 -0.21,20.72 -0.1,10.28 -0.21,20.56 -0.31,30.84 -0.13,12.46 -0.25,24.91 -0.38,37.37 -0.14,13.74 -0.28,27.47 -0.41,41.21 -0.14,13.77 -0.28,27.54 -0.42,41.31 -0.13,12.93 -0.26,25.86 -0.39,38.78 -0.11,10.85 -0.22,21.7 -0.33,32.55 -0.08,7.86 -0.16,15.71 -0.24,23.57 -0.04,3.7 -0.1,7.4 -0.11,11.09 0,0.16 0,0.32 0,0.48 -0.02,1.85 0.42,3.52 2.36,4.19 1.96,0.68 4.84,-0.35 6.5,-1.26 2.71,-1.49 5.27,-3.54 7.12,-6.03 1.46,-1.96 3.24,-4.48 3.27,-7.01 0.03,-2.56 0.05,-5.12 0.08,-7.68 0.07,-6.91 0.14,-13.81 0.21,-20.72 0.1,-10.28 0.21,-20.56 0.31,-30.84 0.13,-12.46 0.25,-24.91 0.38,-37.37 0.14,-13.74 0.28,-27.47 0.41,-41.21 0.14,-13.77 0.28,-27.54 0.42,-41.31 0.13,-12.93 0.26,-25.86 0.39,-38.78 0.11,-10.85 0.22,-21.7 0.33,-32.55 0.08,-7.86 0.16,-15.71 0.24,-23.57 0.04,-3.7 0.1,-7.4 0.11,-11.09 0,-0.16 0,-0.32 0,-0.49 0.02,-1.85 -0.42,-3.52 -2.36,-4.19 -1.96,-0.68 -4.84,0.35 -6.5,1.26 -2.71,1.49 -5.27,3.54 -7.12,6.03 -1.46,1.97 -3.25,4.49 -3.27,7.02 z"
             id="path1117-2-3-7-9-9"
             style="fill:#010202;fill-opacity:1;fill-rule:nonzero" /></g></g><g
         id="g1125-8-7-2-2-3"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero"><path
           class="st0"
           d="m 457.67,541.7 c -6.67,0 -12.08,-5.41 -12.08,-12.08 v -4.58 c 0,-6.67 5.41,-12.08 12.08,-12.08 6.67,0 12.08,5.41 12.08,12.08 v 4.58 c 0.01,6.67 -5.4,12.08 -12.08,12.08 z"
           id="path1123-9-4-7-2-7"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero" /></g></g><path
       id="path980-6-7-8-4"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2"
       d="M 3.8522396,2.7493121 V 164.73785 c 0,55.68401 45.3014084,100.98694 100.9854304,100.98694 55.68405,0 100.98684,-45.30293 100.98684,-100.98694 V 2.7493121 Z M 7.8906785,6.789269 H 201.78453 v 32.01635 H 7.8906785 Z m 0,36.054791 H 102.81839 v 91.89817 H 7.8906785 Z m 98.9676715,0 c -0.0343,0.08277 94.92618,0.0054 94.92618,0.0054 v 121.88828 c 0,52.78064 -42.39794,95.84339 -94.92618,96.92036 z M 7.8906785,138.78217 H 102.81839 V 261.65818 C 50.290173,260.5773 7.8906785,217.51849 7.8906785,164.73785 Z" /><script
       id="mesh_polyfill"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></g><script
     id="script2626"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script663"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><path
     style="fill:#000000;stroke-width:0.082791"
     d="m 13.05232,126.81513 c -0.649817,-0.60764 -1.782755,-1.72364 -2.517643,-2.47999 -1.3417326,-1.38092 -1.752816,-1.95154 -1.6467232,-2.2858 0.073991,-0.23313 1.005605,-1.07274 1.2615652,-1.13699 0.118803,-0.0298 0.402723,-0.007 0.630937,0.0521 l 0.414933,0.10634 7.006264,-7.02781 c 7.140874,-7.16285 8.229351,-8.29943 8.182273,-8.54389 -0.05105,-0.26506 -0.323268,-0.19414 -0.867457,0.22597 -0.29979,0.23144 -0.592017,0.42079 -0.649391,0.42079 -0.155862,0 -0.938316,-0.73049 -1.083795,-1.01181 -0.120665,-0.23334 -0.115722,-0.2611 0.102606,-0.57614 0.361812,-0.52211 2.316383,-2.53476 7.799595,-8.031412 l 5.094761,-5.10724 -3.720244,-3.782477 c -6.866007,-6.98085 -7.608615,-7.840475 -8.057533,-9.32721 -0.81481,-2.698538 -0.0381,-5.734759 1.984327,-7.757225 0.936156,-0.936148 1.885635,-1.46164 3.532262,-1.954928 0.603076,-0.18067 1.096716,-0.355289 1.096982,-0.388045 8.29e-4,-0.09278 -2.22479,-2.089062 -2.94278,-2.639573 -1.32918,-1.019141 -3.478313,-2.258685 -4.839108,-2.791028 -1.038372,-0.406153 -1.350433,-0.438166 -5.014747,-0.514441 -4.614988,-0.09605 -5.466597,-0.224123 -6.136277,-0.922768 -0.356941,-0.372381 -0.44237,-0.630363 -0.527959,-1.594404 -0.181294,-2.042013 0.471726,-4.24731 1.887547,-6.37443 2.214901,-3.327649 5.838324,-6.652656 9.09017,-8.34153 3.064548,-1.591596 5.93386,-1.613648 6.693834,-0.05144 0.315739,0.649039 0.382239,1.34889 0.466504,4.909595 0.07924,3.34878 0.179491,4.489581 0.496635,5.651983 0.326515,1.196729 1.580993,3.52143 2.467011,4.571662 1.929981,2.287681 6.36763,7.05071 13.277657,14.251229 2.791764,2.909119 3.681532,3.788453 3.87194,3.826538 0.609736,0.121945 1.245496,0.811615 1.245496,1.351106 0,0.169612 0.235557,0.442041 0.382218,0.442041 0.08322,0 3.481764,-3.263503 5.232436,-5.024532 l 1.019754,-1.025794 -0.13824,-0.416194 -0.138242,-0.416205 0.238784,-0.386227 c 0.13133,-0.212427 0.423888,-0.526424 0.650124,-0.697778 0.38817,-0.293994 0.445365,-0.311561 1.015358,-0.311961 l 0.604018,-4.09e-4 1.539343,-1.510945 c 0.846646,-0.831009 1.724121,-1.731489 1.949947,-2.001054 L 64.41806,67.702676 64.3644,67.19931 64.31073,66.695934 64.730165,66.22581 c 0.230689,-0.258564 0.552345,-0.552262 0.714783,-0.652661 0.26262,-0.162304 0.331119,-0.171811 0.618125,-0.08584 0.269752,0.0808 0.36722,0.07432 0.593311,-0.03978 0.38216,-0.192833 4.118378,-3.95602 4.473278,-4.50556 0.161742,-0.250445 0.353001,-0.664632 0.425029,-0.920417 0.17244,-0.612377 0.789193,-1.312611 3.204647,-3.638425 3.197072,-3.078427 3.570827,-3.389112 4.077098,-3.389112 0.110643,0 0.419489,-0.162723 0.686325,-0.361617 0.532703,-0.397055 2.102251,-1.972895 2.254244,-2.263279 0.06228,-0.118978 0.0769,-0.383293 0.042,-0.758864 l -0.05356,-0.576301 0.316402,-0.386129 c 0.369948,-0.451472 0.944495,-0.869647 1.194835,-0.869647 0.09661,0 0.319914,0.08302 0.496224,0.184491 0.284058,0.163484 0.352599,0.172914 0.60182,0.08279 0.399834,-0.144584 1.103293,-0.125828 1.457454,0.03886 0.166254,0.0773 0.816838,0.64492 1.44574,1.261364 1.432048,1.403693 1.652537,1.79095 1.676546,2.944608 0.0085,0.40982 0.04281,0.896718 0.07619,1.082005 0.0574,0.318736 0.03861,0.363321 -0.348813,0.827907 -0.857929,1.028772 -1.309952,1.291561 -1.749491,1.017057 -0.08443,-0.05272 -0.249423,-0.07042 -0.371266,-0.03987 -0.381398,0.09573 -13.255289,12.862705 -14.829142,14.705994 -0.376566,0.441033 -0.387148,0.46807 -0.336525,0.859664 l 0.05226,0.404318 -0.699673,0.699673 -0.699669,0.699672 -0.450275,-0.05624 -0.450269,-0.05624 -1.036805,0.956142 c -0.570242,0.525872 -1.49244,1.448012 -2.04933,2.049198 -1.069128,1.154171 -1.054823,1.126002 -0.870182,1.713541 0.05133,0.163361 -0.04816,0.299237 -0.686777,0.937852 l -0.74681,0.746807 -0.361654,-0.05424 c -0.354274,-0.0531 -0.374945,-0.04292 -1.012916,0.501463 -0.358196,0.305622 -1.773666,1.668871 -3.145482,3.029436 l -2.494215,2.473748 0.745118,0.70306 c 0.409818,0.386684 0.940248,0.839089 1.17873,1.005352 l 0.433612,0.302301 0.32708,-0.147486 c 0.367423,-0.165683 0.65994,-0.128054 0.983598,0.126531 0.242968,0.19112 0.493218,0.201426 0.71979,0.02969 0.163583,-0.124029 0.16233,-0.131423 -0.10349,-0.612445 -0.322037,-0.582743 -0.337786,-0.851384 -0.06585,-1.123308 0.250354,-0.250351 0.719624,-0.271763 1.080047,-0.0493 0.408471,0.252149 1.746977,1.558365 2.021344,1.972581 0.636859,0.961481 -0.04508,1.549572 -1.148119,0.990116 -0.384055,-0.194803 -0.47926,-0.214074 -0.637866,-0.129196 -0.287679,0.153958 -0.270565,0.332383 0.07132,0.743486 0.419991,0.505031 0.417043,0.773301 -0.01493,1.358024 -0.398183,0.539005 -0.291725,0.638091 0.257473,0.239645 0.211005,-0.153083 0.434545,-0.277387 0.496746,-0.276217 0.0622,9.52e-4 0.316277,0.131556 0.564607,0.289768 0.493931,0.314673 0.750371,0.357202 0.950022,0.157546 0.170156,-0.170155 0.17507,-0.146897 -0.159669,-0.755877 -0.408126,-0.742487 -0.373688,-1.258615 0.09589,-1.437154 0.319873,-0.121621 0.743442,0.03064 1.449837,0.520953 0.638435,0.443202 1.206123,1.028905 1.445007,1.490845 0.07263,0.140464 0.151499,0.469697 0.175248,0.73162 0.0391,0.431392 0.02301,0.49639 -0.170886,0.690298 -0.296618,0.29662 -0.633588,0.275855 -1.27879,-0.0788 -0.418103,-0.229824 -0.557711,-0.272201 -0.648507,-0.19684 -0.18649,0.154767 -0.13522,0.42534 0.171947,0.907494 0.158205,0.248333 0.288603,0.511588 0.289768,0.585017 0.0012,0.07347 -0.109652,0.274142 -0.246256,0.446029 -0.136601,0.171907 -0.248371,0.405213 -0.248371,0.518488 0,0.188065 0.02334,0.201322 0.269071,0.152711 0.147987,-0.02931 0.373414,-0.164331 0.500942,-0.300112 0.280426,-0.29859 0.364513,-0.304062 0.741531,-0.04825 0.570914,0.387436 0.886296,0.373142 1.105154,-0.05006 0.123809,-0.239425 0.121313,-0.265729 -0.04471,-0.470181 -0.650493,-0.8011 -0.644103,-1.665417 0.01231,-1.665417 0.326533,0 1.122787,0.581592 1.89463,1.383861 0.537052,0.55821 0.742558,0.839708 0.883903,1.210728 0.232215,0.60956 0.230433,0.678317 -0.02422,0.932941 -0.236623,0.236628 -0.315353,0.22811 -1.062622,-0.114826 l -0.484468,-0.222334 -0.206208,0.23973 c -0.244129,0.28381 -0.221268,0.535379 0.09039,0.994627 0.21876,0.322352 0.211291,0.431849 -0.05572,0.816982 -0.112147,0.161757 -0.146441,0.307747 -0.112343,0.478237 0.08566,0.42827 1.147199,1.76092 2.862011,3.592944 1.218114,1.30136 3.485652,3.68853 4.562311,4.80299 8.081919,8.36574 11.194979,11.8322 11.382857,12.67503 0.03636,0.16307 0.422052,0.59986 1.19924,1.35807 0.630117,0.61472 1.72347,1.68286 2.429695,2.37364 1.361707,1.33194 1.324142,1.30664 3.185229,2.14614 0.515344,0.23246 1.089729,0.74723 1.089729,0.97663 0,0.24101 -0.701274,1.14837 -1.374015,1.7778 -0.733788,0.68653 -1.483832,1.15246 -1.713422,1.06436 -0.201982,-0.0776 -0.551213,-0.67872 -0.816511,-1.40564 -0.698027,-1.91264 -1.448328,-2.85451 -4.689769,-5.88719 -0.666521,-0.6236 -1.032173,-0.85236 -1.295904,-0.81072 -0.02281,0.004 -0.26944,-0.12233 -0.548082,-0.27983 -0.278646,-0.15749 -0.52472,-0.28636 -0.546835,-0.28636 -0.05856,0 -0.724778,-0.54025 -1.402087,-1.13698 -0.323895,-0.28536 -0.631257,-0.51884 -0.683029,-0.51884 -0.06544,0 -0.09413,0.32478 -0.09413,1.06544 0,2.40605 -0.446774,3.57009 -1.986109,5.17461 -1.675737,1.74669 -3.277518,2.45302 -5.562854,2.45302 -1.063916,0 -2.283585,-0.22117 -3.065517,-0.55586 -0.286508,-0.12264 -0.539548,-0.24334 -0.562313,-0.26822 -0.02276,-0.0249 -0.282706,-0.21081 -0.577637,-0.4132 -0.294926,-0.20238 -0.647126,-0.46317 -0.782657,-0.57954 -0.740432,-0.63571 -1.548487,-1.40494 -2.696474,-2.56694 -1.481883,-1.49997 -1.734139,-1.66 -2.616662,-1.66 -1.109599,0 -2.034257,-0.3872 -3.013132,-1.26176 -1.243692,-1.11115 -3.030192,-2.80169 -5.097196,-4.82338 -1.257003,-1.22945 -2.337746,-2.24733 -2.40165,-2.26196 -0.0639,-0.0146 -0.45105,0.27364 -0.860322,0.64059 -1.443953,1.29467 -2.501084,1.9903 -3.024606,1.9903 -0.612278,0 -1.620954,-0.76428 -2.00256,-1.51734 -0.205664,-0.40585 -0.205759,-0.40718 -0.05401,-0.74676 0.08361,-0.18711 0.197084,-0.39608 0.252161,-0.46438 0.05507,-0.0683 0.320349,-0.40361 0.5895,-0.74512 0.26915,-0.34151 0.873474,-1.03075 1.342939,-1.53164 1.260075,-1.3444 1.900348,-2.11673 1.900348,-2.29229 0,-0.1295 -0.02762,-0.14108 -0.163347,-0.0684 -0.262384,0.14043 -1.127842,0.88235 -2.041153,1.74981 -1.777726,1.68849 -2.50303,2.16622 -3.288768,2.16622 -0.542186,0 -0.720129,-0.091 -1.319126,-0.6747 -0.749807,-0.73064 -0.856348,-1.30514 -0.408964,-2.20524 0.267587,-0.53836 0.654093,-1.02199 1.786454,-2.23536 1.103181,-1.18211 1.735798,-1.91835 1.867361,-2.17327 0.08118,-0.15729 0.07457,-0.18628 -0.0425,-0.18628 -0.185428,0 -1.046296,0.70393 -2.150538,1.75847 -1.076116,1.0277 -2.314928,2.04561 -2.807572,2.30696 l -0.355315,0.1885 -0.534054,-0.26292 c -0.689162,-0.33927 -1.26662,-0.84938 -1.392169,-1.2298 -0.142195,-0.43085 -0.03993,-0.96989 0.302813,-1.59601 0.426302,-0.77878 0.761007,-1.17938 2.56382,-3.06852 0.94814,-0.99354 1.276111,-1.35565 1.276593,-1.40947 2.32e-4,-0.0234 -0.495959,-0.537877 -1.102605,-1.143274 l -1.10299,-1.10072 -8.277847,8.346104 c -8.590052,8.66087 -9.932008,10.03968 -10.277363,10.55962 -0.194671,0.29308 -0.198407,0.32013 -0.07103,0.51453 0.275668,0.42073 0.123107,0.87876 -0.490328,1.4721 -0.604361,0.58457 -0.962901,0.65529 -1.459768,0.28795 -0.219165,-0.16205 -0.230893,-0.16244 -0.45695,-0.0151 -0.395318,0.25754 -1.591331,1.51514 -1.645247,1.72995 -0.02985,0.11903 0.0165,0.38642 0.111572,0.64321 0.08948,0.24173 0.138694,0.50572 0.109361,0.58667 -0.07437,0.20522 -0.830797,0.96302 -1.101042,1.10304 -0.310908,0.1611 -0.5868,0.14463 -0.833915,-0.0498 -0.115776,-0.0911 -0.268561,-0.16559 -0.339528,-0.16559 -0.184483,0 -1.451715,1.15299 -2.178707,1.98229 -0.642603,0.73306 -0.652098,0.75914 -0.477945,1.3132 0.0511,0.16256 -0.04351,0.2943 -0.639215,0.89 -0.527253,0.52726 -0.753447,0.69919 -0.919834,0.69919 -0.168949,0 -0.497448,-0.25884 -1.402126,-1.10481 z m 1.855394,-0.52319 c 0.145778,-0.13193 0.126856,-0.16439 -0.44638,-0.76582 -1.579369,-1.65705 -3.886923,-3.98109 -3.952848,-3.98109 -0.15454,0 -0.583242,0.43601 -0.583242,0.59318 0,0.2441 0.654665,1.05411 1.817286,2.2485 1.168325,1.20026 1.617439,1.55849 2.301006,1.83534 0.584955,0.23689 0.671866,0.24392 0.864178,0.0699 z m 79.338147,-1.05413 c 0.07533,-0.21503 0.0584,-0.26024 -0.163919,-0.43792 -0.188978,-0.15104 -1.469509,-0.77113 -1.592422,-0.77113 -0.07873,0 0.0053,0.39034 0.141457,0.65728 0.163761,0.321 0.555049,0.62232 0.976528,0.75202 0.371769,0.1144 0.547436,0.0593 0.638356,-0.20025 z M 75.90169,124.85219 c 1.167086,-0.18937 2.661372,-0.97105 3.497766,-1.82973 0.779986,-0.80079 1.408789,-1.90275 1.67752,-2.93982 0.784486,-3.02743 0.261603,-3.84798 -7.318042,-11.48408 -4.77405,-4.80961 -8.15004,-7.99969 -8.465907,-7.99969 -0.368861,0 2.278615,2.87221 8.016276,8.69672 5.14543,5.22333 6.144583,6.37579 6.728082,7.76044 0.344077,0.81649 0.312504,2.17423 -0.07688,3.306 -0.756508,2.19883 -3.362148,3.7296 -5.833787,3.42727 -1.557016,-0.19045 -2.259435,-0.76763 -8.774609,-7.21014 -2.05006,-2.02719 -4.326899,-4.24673 -5.059651,-4.93229 -1.401491,-1.31125 -2.802695,-2.52051 -2.920587,-2.52051 -0.0384,0 -0.115676,0.0552 -0.171697,0.12273 -0.08394,0.10115 -0.03907,0.19941 0.255349,0.55883 2.426913,2.96299 11.109229,11.71607 13.519066,13.62925 1.556727,1.23591 3.172012,1.6998 4.927105,1.41502 z m -61.208092,-0.58573 c 0.08674,-0.0969 0.429687,-0.378 0.762094,-0.62459 0.349319,-0.25912 0.709659,-0.61275 0.853849,-0.83793 l 0.249474,-0.38961 -0.267144,-0.20697 c -0.627359,-0.48607 -1.055009,-0.93485 -1.280124,-1.34337 -0.213087,-0.38669 -0.240435,-0.51717 -0.239,-1.14036 0.0012,-0.5261 0.04064,-0.77688 0.156227,-0.99351 0.240841,-0.45138 1.073595,-1.22047 1.440536,-1.3304 0.444378,-0.13314 1.472092,-0.0641 1.861377,0.1249 0.688942,0.33462 1.221047,1.17401 1.244405,1.96303 l 0.01231,0.41629 0.285322,-0.0463 c 0.156932,-0.0254 0.473608,-0.17612 0.703726,-0.33491 0.576764,-0.39799 1.3207,-1.16686 1.266266,-1.3087 -0.02459,-0.0641 -0.363997,-0.19413 -0.764906,-0.2931 -1.084545,-0.26775 -1.733044,-0.75962 -2.023923,-1.53513 -0.164218,-0.43783 -0.105584,-1.29747 0.121809,-1.78597 0.262268,-0.56337 0.314093,-0.60479 -1.657002,1.32393 -0.865753,0.84714 -1.812753,1.75992 -2.104436,2.02838 -0.868196,0.79908 -2.515975,2.70032 -2.760611,3.18525 -0.25902,0.51344 -0.286512,0.87768 -0.09512,1.26026 0.150185,0.30019 1.843849,2.04497 1.985073,2.04497 0.05064,0 0.16304,-0.0794 0.249786,-0.17626 z m 5.093531,-1.96657 c 0.176782,-0.17679 0.321423,-0.3766 0.321423,-0.44402 0,-0.14233 -0.772917,-0.89039 -0.919975,-0.89039 -0.121909,0 -0.735846,0.63446 -0.735846,0.76044 0,0.12632 0.780427,0.89539 0.908614,0.89539 0.05739,0 0.248997,-0.14464 0.425784,-0.32142 z m 56.00092,0.0275 c 0.670224,-0.17457 1.118732,-0.48156 1.955636,-1.33858 0.902199,-0.92388 1.064165,-1.23301 1.06246,-2.02773 -0.0025,-1.24814 -0.28574,-1.86985 -1.537572,-3.37704 -0.726511,-0.87469 -12.319386,-12.52219 -13.053112,-13.1146 l -0.393311,-0.31756 -0.451299,0.38556 c -0.248213,0.21206 -1.180712,1.09762 -2.072216,1.96793 l -1.620922,1.58236 3.170426,3.19585 c 3.353705,3.38058 4.487095,4.57918 4.930427,5.21415 0.384822,0.55116 0.762778,1.85409 0.762778,2.62953 v 0.60552 l 0.393485,0.3124 c 0.216421,0.17181 0.710061,0.6442 1.096986,1.04975 1.032214,1.0819 2.650731,2.53258 3.18877,2.8581 0.820773,0.49657 1.639814,0.61601 2.567464,0.37439 z m -58.299447,-1.2031 c 0.408997,-0.11356 1.010548,-0.66707 1.135086,-1.04443 0.13546,-0.41046 0.05657,-1.04214 -0.171798,-1.3754 -0.3177,-0.46366 -0.697886,-0.67224 -1.230991,-0.67536 -1.06098,-0.006 -1.821362,0.88104 -1.629867,1.90179 0.07048,0.37571 0.559802,0.92851 0.998896,1.12848 0.388169,0.17679 0.473591,0.18296 0.898674,0.0649 z m 46.395922,-2.32948 c -0.785132,-1.1793 -7.915387,-8.22337 -8.118447,-8.0203 -0.0541,0.0542 -0.03894,0.14675 0.04462,0.2725 0.268193,0.40363 3.67566,3.91043 5.32706,5.48233 2.284801,2.1748 3.175476,2.90942 2.74676,2.26547 z M 23.83391,118.26515 c 0.182273,-0.16468 0.331405,-0.36664 0.331405,-0.44882 0,-0.18117 -0.707644,-0.9076 -0.884123,-0.9076 -0.168364,0 -0.688909,0.52768 -0.688909,0.69836 0,0.20988 0.246015,0.53593 0.571001,0.75677 0.162443,0.11037 0.305218,0.20068 0.317285,0.20068 0.01207,0 0.171072,-0.13472 0.353341,-0.29939 z m 62.181663,-0.27022 c -0.636357,-1.18904 -17.83724,-19.180404 -18.495691,-19.345674 -0.259741,-0.0652 -0.551569,0.13846 -0.551569,0.38492 0,0.35356 5.313375,5.855474 12.544207,12.989334 5.094799,5.02647 6.869452,6.65605 6.503053,5.97142 z M 21.723686,117.0027 c 0.432098,-0.1963 0.837057,-0.66423 0.958104,-1.10708 0.256117,-0.93697 -0.527428,-1.87753 -1.568475,-1.88276 -1.254755,-0.007 -1.986192,1.66425 -1.147107,2.61992 0.463461,0.52785 1.110185,0.66398 1.757478,0.36992 z m 2.658137,-1.3517 c 1.060739,-0.80583 5.719055,-5.348 5.972482,-5.82358 0.07036,-0.13205 0.05758,-0.21076 -0.05944,-0.36591 -0.11678,-0.15481 -0.260143,-0.21075 -0.661371,-0.25805 -0.339802,-0.0401 -0.642726,-0.14069 -0.899752,-0.29884 -0.411328,-0.25311 -0.881648,-0.86827 -0.992903,-1.29869 -0.05847,-0.2262 -0.122905,-0.27458 -0.501133,-0.37624 l -0.434032,-0.11666 -0.388779,0.37152 c -0.213829,0.20433 -1.115277,1.03734 -2.003206,1.85115 -1.477583,1.35422 -3.350653,3.09803 -4.298603,4.00193 l -0.379095,0.36149 0.37256,-0.19087 c 0.452103,-0.23165 1.362972,-0.25874 1.821403,-0.0541 0.810212,0.36151 1.316188,0.94364 1.528425,1.75848 0.06537,0.25096 0.141602,0.49311 0.169406,0.53811 0.08859,0.14333 0.506971,0.088 0.754037,-0.0996 z m 42.262396,-0.38817 c -0.767602,-1.07799 -7.424509,-7.79229 -7.725689,-7.79229 -0.210627,0 0.06437,0.37202 1.081217,1.46266 1.87098,2.00676 6.579368,6.56808 6.779857,6.56808 0.01891,0 -0.04201,-0.1073 -0.135385,-0.23845 z m -15.974164,-2.87879 c 1.379015,-1.00864 3.575745,-3.04094 7.59267,-7.02436 5.458179,-5.412647 8.87117,-9.15814 8.87117,-9.73543 0,-0.523893 -1.10941,0.249047 -3.146064,2.191896 -0.43258,0.41267 -2.351264,2.299434 -4.263741,4.192824 -6.252936,6.19052 -8.848835,8.89366 -9.567214,9.96243 -0.584914,0.8702 -0.359835,1.05118 0.513179,0.41264 z m -3.24004,-3.47535 c 2.982836,-2.24026 12.776151,-11.983294 15.58116,-15.501176 0.513821,-0.6444 0.838343,-1.198461 0.752332,-1.284471 -0.350906,-0.350911 -1.855381,0.969989 -7.673469,6.737133 -4.113352,4.077334 -7.756074,7.824994 -8.703659,8.954394 -0.573145,0.68312 -0.950259,1.2681 -0.950259,1.47408 0,0.21068 0.422545,0.0491 0.993895,-0.37996 z m -16.425648,-1.15531 c 0.177309,-0.13227 0.349749,-0.27797 0.383205,-0.32376 0.118181,-0.16178 0.06027,-0.99277 -0.09235,-1.32513 -0.252377,-0.5496 -0.43552,-0.65838 -1.15669,-0.687 -0.899897,-0.0357 -1.172531,0.11432 -1.328782,0.73125 -0.208472,0.82313 0.0731,1.49155 0.739258,1.75493 0.522319,0.20652 1.05014,0.15201 1.455357,-0.15029 z m 1.987378,-0.41794 c 0.528203,-0.47275 0.631594,-0.61138 0.743799,-0.99735 0.11913,-0.4098 0.118894,-0.46573 -0.003,-0.65141 -0.08278,-0.12635 -0.211644,-0.20312 -0.340914,-0.20312 -0.354149,0 -0.984838,-0.38248 -1.425197,-0.8643 -0.346859,-0.37953 -0.437718,-0.54478 -0.514975,-0.93664 -0.206262,-1.04625 -0.279202,-1.21878 -0.527457,-1.24768 -0.194521,-0.0226 -0.349231,0.0928 -1.010564,0.75414 -0.461736,0.46173 -0.780882,0.84809 -0.780882,0.94531 0,0.28715 0.273545,0.44705 0.798622,0.46687 0.816341,0.0308 1.667216,0.5533 2.043462,1.25486 0.141573,0.26398 0.179395,0.48387 0.186441,1.08392 0.0081,0.69113 0.05428,0.94446 0.172133,0.94446 0.02468,0 0.320889,-0.24708 0.658303,-0.54906 z m 10.675364,-1.53126 c 1.179762,-0.746 3.804249,-3.17072 8.363641,-7.727044 4.751498,-4.748295 7.045595,-7.223204 8.01218,-8.643647 0.32489,-0.477443 0.366569,-0.631277 0.189459,-0.699244 -0.462063,-0.177311 -3.043776,2.227328 -10.739426,10.002801 -3.827254,3.866974 -4.695687,4.775174 -5.561979,5.816664 -0.694021,0.83439 -0.925988,1.21157 -0.856493,1.39267 0.06356,0.16563 0.131624,0.14929 0.592618,-0.1422 z m 10.307236,0.007 c 0.117716,-0.11772 0.152963,-0.22567 0.11488,-0.35186 -0.100442,-0.33284 -0.201813,-0.36104 -0.414642,-0.11534 -0.286347,0.33056 -0.257755,0.59621 0.06785,0.63049 0.03416,0.004 0.138512,-0.0699 0.231912,-0.16329 z m -25.736688,-0.47252 c 0.116676,-0.12522 0.230304,-0.28355 0.252501,-0.35186 0.09659,-0.29716 -0.51974,-0.99566 -0.874669,-0.99126 -0.09896,9.5e-4 -0.305592,0.10645 -0.459185,0.23385 -0.212295,0.17609 -0.266211,0.27273 -0.224851,0.40304 0.06685,0.21063 0.82723,0.9339 0.981819,0.9339 0.06173,0 0.207708,-0.10244 0.324385,-0.22767 z m 6.256112,-1.25296 c 0.475644,-0.24391 0.696128,-0.52726 0.744549,-0.95685 0.03533,-0.31349 0.0051,-0.43461 -0.17677,-0.70951 -0.120656,-0.18233 -0.376994,-0.44668 -0.569641,-0.58745 -0.326703,-0.23872 -0.386278,-0.25315 -0.88562,-0.21444 -0.482241,0.0374 -0.561833,0.0704 -0.80223,0.33273 -0.14678,0.16017 -0.306744,0.43927 -0.355476,0.62024 -0.119923,0.44536 0.09117,0.93067 0.614259,1.41221 0.370816,0.34135 0.41375,0.35904 0.756919,0.31201 0.200095,-0.0274 0.503397,-0.12145 0.67401,-0.20894 z m 21.514401,-0.36481 c 0.602806,-0.48401 3.630361,-3.53686 4.196532,-4.231597 0.256129,-0.314297 0.445853,-0.603527 0.421608,-0.642767 -0.09197,-0.14881 -0.875979,0.52905 -2.649152,2.290484 -2.2114,2.19677 -3.04886,3.18022 -2.542717,2.98599 0.07682,-0.0295 0.335,-0.21042 0.573729,-0.40211 z m -19.220552,-0.18265 c 0.33053,-0.29583 0.68915,-0.70409 0.796931,-0.90726 l 0.195968,-0.36941 -0.171893,-0.23024 c -0.117351,-0.15717 -0.278459,-0.24842 -0.507718,-0.28756 -1.087868,-0.18571 -1.994698,-1.25308 -2.043056,-2.404744 -0.0209,-0.49731 -0.106849,-0.64041 -0.386341,-0.64309 -0.197682,-0.002 -0.722862,0.40662 -1.213027,0.943547 -0.743085,0.813987 -0.676332,1.099427 0.281698,1.204587 0.703496,0.0773 1.132083,0.28955 1.592335,0.78887 0.486723,0.52804 0.700229,1.03837 0.693075,1.65665 -0.0058,0.50268 0.03637,0.78651 0.116933,0.78651 0.02426,0 0.314566,-0.24204 0.645095,-0.53786 z m -9.797377,-0.53843 c 1.830815,-1.69165 7.488475,-7.308145 9.574143,-9.504459 l 1.124308,-1.183957 -0.187662,-0.182099 -0.187667,-0.182098 -5.252726,5.298639 c -4.688232,4.729194 -5.862384,5.984474 -6.046469,6.464204 -0.09237,0.2407 0.09256,0.10614 0.976073,-0.71023 z m 2.544443,-0.35631 0.691669,-0.69941 -0.143301,-0.21871 c -0.17033,-0.25995 -0.151002,-0.27069 -1.018435,0.56567 -0.697169,0.67219 -0.903584,0.9908 -0.75662,1.16788 0.147975,0.1783 0.428126,-0.008 1.226687,-0.81543 z m 20.896106,-0.29004 c 0.07969,-0.0684 0.144886,-0.21179 0.144886,-0.31858 0,-0.16083 -0.04293,-0.19414 -0.25015,-0.19414 -0.313429,0 -0.483617,0.29135 -0.333756,0.57138 0.09703,0.1813 0.171135,0.17139 0.43902,-0.0586 z m -18.269161,-0.88472 c 0.24585,-0.24586 0.212486,-0.33633 -0.312545,-0.84754 l -0.359702,-0.35023 -0.2676,0.16273 c -0.147178,0.0896 -0.267458,0.20986 -0.267288,0.26745 4.15e-4,0.19959 0.330638,0.64515 0.59917,0.80887 0.341817,0.20841 0.359461,0.20721 0.607965,-0.0413 z m 5.299517,-0.78595 c 0.04986,-8.3e-4 0.316672,-0.14721 0.592917,-0.32575 0.908311,-0.587077 1.14226,-1.300034 0.62738,-1.911934 -1.018908,-1.2109 -3.094956,-0.33514 -2.809724,1.185267 0.108523,0.578507 0.855502,1.188217 1.333194,1.088217 0.09107,-0.019 0.206378,-0.0352 0.256233,-0.0358 z m 14.866405,-0.42957 c 0.243147,-0.1901 1.070961,-0.963154 1.839586,-1.717914 2.098054,-2.060176 3.225137,-3.368495 2.771657,-3.217335 -0.552345,0.184116 -5.204043,4.834349 -5.204043,5.202409 0,0.14669 0.149887,0.0792 0.5928,-0.26716 z M 41.220918,98.568816 c 0.120964,-0.31816 -0.01638,-0.50458 -0.419182,-0.569 -0.7176,-0.11475 -1.399044,-0.64155 -1.739435,-1.3447 -0.09676,-0.199885 -0.20962,-0.631725 -0.250793,-0.959635 -0.09093,-0.724158 -0.21778,-0.893666 -0.539793,-0.721332 -0.356625,0.190863 -1.320883,1.123585 -1.467763,1.419767 -0.131259,0.264673 -0.129389,0.277416 0.06606,0.45057 0.110631,0.098 0.361634,0.20303 0.55779,0.23337 1.028682,0.15917 1.712063,0.6192 2.101148,1.41447 0.20026,0.40932 0.218315,0.52062 0.183102,1.128877 l -0.03907,0.674807 0.732871,-0.755537 c 0.403077,-0.415517 0.769849,-0.852777 0.815052,-0.971657 z m -8.042302,0.42142 c 0.785743,-0.77434 0.790943,-0.78211 0.637108,-0.95209 -0.0853,-0.0943 -0.199896,-0.17138 -0.254648,-0.17138 -0.05476,0 -0.421538,0.33401 -0.815081,0.74224 -0.650535,0.67483 -0.815598,0.951487 -0.660334,1.106757 0.142096,0.14209 0.358006,-9.5e-4 1.092955,-0.725527 z m 13.837044,-0.0603 c 0,-0.17927 -0.756289,-1.10546 -2.193516,-2.686312 -0.781969,-0.860111 -4.040781,-4.202859 -7.858643,-8.061059 -7.186944,-7.26288 -8.883995,-9.092904 -9.407376,-10.144487 -0.589592,-1.184624 -0.504953,-2.809272 0.226037,-4.33864 0.400629,-0.838204 1.398783,-1.85332 2.234037,-2.272008 0.95924,-0.48084 1.805574,-0.66271 2.852907,-0.613072 1.034126,0.04901 1.444546,0.203548 2.335375,0.879334 1.214611,0.921407 3.90491,3.465844 9.24465,8.743439 7.330719,7.245399 10.845636,10.54538 10.845636,10.182411 0,-0.348637 -4.143897,-4.701219 -10.716806,-11.256529 -9.088904,-9.064554 -10.27776,-9.968375 -12.690015,-9.647431 -0.75856,0.100913 -2.159744,0.576786 -2.79567,0.949471 -1.667768,0.977374 -2.719115,2.686205 -2.957326,4.806776 -0.168353,1.49865 0.177528,2.836223 1.02762,3.973978 1.12175,1.501323 5.321909,5.879362 11.914909,12.419493 5.30594,5.263386 7.367279,7.146716 7.834692,7.158076 0.05692,9.5e-4 0.103489,-0.0406 0.103489,-0.0935 z m -11.168884,-1.15158 c 0.132251,-0.0942 0.240456,-0.23648 0.240456,-0.31625 0,-0.18717 -0.488607,-0.753783 -0.811639,-0.941211 -0.246066,-0.142776 -0.25513,-0.141663 -0.496195,0.06119 -0.795122,0.669061 0.216126,1.802431 1.067378,1.196281 z m 26.352329,-0.18471 c 0.189567,-0.13862 0.153,-0.58309 -0.05116,-0.62179 -0.166005,-0.0315 -0.488668,0.44033 -0.421268,0.61598 0.05492,0.1431 0.280856,0.14588 0.472426,0.006 z M 48.272679,96.808606 C 46.405738,94.578758 33.046307,81.308575 32.668394,81.308575 c -0.269524,0 1.936092,2.325691 7.185645,7.576821 5.784554,5.78629 8.422874,8.31907 8.665751,8.31907 0.04637,0 -0.06483,-0.17814 -0.247111,-0.39586 z m -6.357906,0.0866 0.239141,-0.120839 -1.065396,-1.067761 c -0.987629,-0.989831 -1.070609,-1.05421 -1.136811,-0.881951 -0.183575,0.477652 0.104095,1.628083 0.495647,1.982161 0.346371,0.31323 0.950454,0.34961 1.467419,0.0884 z m 11.658262,-4.517682 0.336961,-0.3976 -0.239017,-0.251892 c -0.131454,-0.138541 -0.642046,-0.627423 -1.134642,-1.086404 l -0.895629,-0.834511 -2.063927,2.062692 -2.063927,2.062683 1.137238,1.13942 1.137238,1.139411 1.724369,-1.7181 c 0.948405,-0.94496 1.876003,-1.897029 2.061336,-2.115699 z m 10.557774,3.298277 c 0.388572,-0.388578 0.421696,-0.564595 0.114724,-0.609637 -0.239365,-0.03512 -0.754448,0.496124 -0.754448,0.778117 0,0.307517 0.222251,0.24899 0.639724,-0.16848 z M 36.633505,95.533605 c 0.507089,-0.479593 1.169334,-1.413904 1.034119,-1.458975 -0.110614,-0.03683 -0.488296,0.226303 -1.126569,0.784988 -0.590222,0.516642 -0.825497,0.863747 -0.682432,1.006808 0.167913,0.167909 0.309921,0.106918 0.774882,-0.332821 z m 2.749291,-1.336507 c 0.08336,-0.06462 -0.01978,-0.212722 -0.450303,-0.646589 -0.429193,-0.432506 -0.583525,-0.541879 -0.666943,-0.472647 -0.220074,0.182651 -0.114201,0.454394 0.346937,0.890517 0.442943,0.418916 0.50239,0.436569 0.770309,0.228719 z m 19.303548,-0.112494 c 0.234707,-0.298381 0.188879,-0.481583 -0.120466,-0.481583 -0.190296,0 -0.262428,0.04882 -0.321909,0.217985 -0.164495,0.467736 0.139371,0.648797 0.442375,0.263598 z m 11.417869,-0.2108 c -0.160279,-0.299485 -1.471314,-1.569234 -1.562234,-1.513039 -0.163173,0.100847 -0.07749,0.287732 0.378133,0.824796 0.423623,0.49935 0.911877,0.860054 1.176475,0.869151 0.08444,0.0029 0.08601,-0.03445 0.0076,-0.180908 z M 46.454299,92.091011 c 0.0124,-0.556925 -0.136638,-0.933493 -0.516185,-1.304113 -0.299778,-0.292728 -0.377006,-0.324979 -0.847321,-0.353862 -0.284609,-0.01751 -0.615894,0.0067 -0.73619,0.05272 -0.216797,0.08375 -0.20918,0.09393 0.86808,1.162546 1.177751,1.168284 1.215141,1.181721 1.231616,0.442717 z m 2.337498,-1.239858 c 0.103684,-0.270202 0.03997,-0.330175 -0.398718,-0.375455 -0.493583,-0.05091 -1.159398,-0.354556 -1.430174,-0.652175 -0.281038,-0.308896 -0.502091,-0.819399 -0.568181,-1.312154 -0.07345,-0.547637 -0.260948,-1.04751 -0.415106,-1.106665 -0.208687,-0.08003 -1.122584,0.723863 -1.371916,1.206854 -0.187581,0.363369 -0.20496,0.752289 -0.04093,0.916306 0.06469,0.06471 0.344571,0.141339 0.621952,0.170336 1.191403,0.124524 1.986574,1.000384 1.990718,2.192717 l 0.0016,0.523255 0.782645,-0.722531 c 0.430453,-0.39739 0.803013,-0.775604 0.82791,-0.840488 z m 11.774535,1.263858 c 0.288792,-0.288797 0.351437,-0.612929 0.132392,-0.685055 -0.165152,-0.05434 -0.886479,0.67649 -0.82522,0.83612 0.08522,0.222087 0.385059,0.156708 0.692828,-0.151065 z m 6.236398,-1.330997 c 0,-0.167519 -0.318794,-0.576186 -0.852538,-1.092866 -0.530881,-0.513919 -0.803282,-0.705724 -0.803282,-0.565613 0,0.01903 -0.02056,0.08822 -0.04572,0.153758 -0.09417,0.245402 1.208449,1.550229 1.547608,1.550229 0.08467,0 0.153929,-0.02046 0.153929,-0.04549 z M 49.370192,88.845636 c 0.162132,-0.100209 0.29478,-0.209325 0.29478,-0.242509 0,-0.119328 -1.71756,-1.747573 -1.843438,-1.747573 -0.189392,0 -0.557503,0.476168 -0.557503,0.721161 0,0.394059 0.199377,0.880143 0.473413,1.154171 0.461777,0.461788 1.009005,0.500244 1.632748,0.11475 z m 8.032718,-0.193842 c 0.354547,-0.541099 -0.150235,-1.16009 -5.201556,-6.378398 -2.486629,-2.568847 -7.822069,-8.105653 -9.986028,-10.362919 -2.089242,-2.179327 -3.482887,-3.666319 -3.89256,-4.153259 -0.236794,-0.28146 -0.480152,-0.530783 -0.540805,-0.554051 -0.06065,-0.02332 -0.265721,-0.240073 -0.455711,-0.481763 -0.18999,-0.241691 -0.674697,-0.793372 -1.077131,-1.225964 -2.537725,-2.727858 -4.738755,-5.491745 -5.719724,-7.1824 -0.60143,-1.036537 -0.608102,-1.049755 -0.896149,-1.775018 -0.55176,-1.389257 -0.747331,-2.842865 -0.749723,-5.572415 -0.0012,-1.623561 -0.111153,-4.066458 -0.219358,-4.883617 -0.109343,-0.825778 -0.693485,-1.064346 -2.033788,-0.830617 -1.115625,0.194551 -2.423213,0.724467 -3.795342,1.538111 -0.247351,0.146673 -0.580124,0.339475 -0.739498,0.42845 -0.986915,0.550974 -3.188973,2.470744 -4.559895,3.975355 -0.860591,0.944516 -2.18032,2.612698 -2.417711,3.056072 -0.05698,0.106404 -0.261329,0.456392 -0.454122,0.777736 -0.983056,1.638561 -0.880894,3.909036 0.225174,5.004139 0.206958,0.204909 0.562571,0.4645 0.790246,0.57688 0.413061,0.203882 0.419671,0.204339 3.063266,0.2108 2.831726,0.0067 3.088702,0.03331 4.825707,0.495629 2.459075,0.654507 4.981452,2.139824 7.59296,4.471158 1.821192,1.625809 2.847682,2.398359 4.180952,3.146641 0.803188,0.450778 1.04191,0.639557 2.81346,2.224825 1.86948,1.672906 4.082286,3.803775 8.611711,8.292862 6.724768,6.664873 8.543994,8.389558 9.59666,9.097957 0.516638,0.347666 0.856908,0.381669 1.038965,0.103806 z m -12.913527,-0.97134 c 0.816652,-0.831219 0.94253,-1.086385 0.562708,-1.140667 -0.133491,-0.01903 -0.372001,0.156556 -0.896654,0.660246 -0.784656,0.753297 -1.014948,1.089725 -0.867536,1.267341 0.159959,0.192737 0.381621,0.04758 1.201482,-0.78692 z M 44.035179,86.04924 c 0.842399,-0.795437 1.542329,-1.491236 1.555395,-1.546232 0.01307,-0.05501 -0.05131,-0.167928 -0.143069,-0.250969 -0.164007,-0.14842 -0.18615,-0.13266 -1.307025,0.930362 -0.627102,0.594724 -1.435966,1.38074 -1.797476,1.746678 -0.645161,0.653079 -0.654504,0.66842 -0.506379,0.832104 0.150741,0.166567 0.151189,0.16651 0.408911,-0.04949 0.141904,-0.118928 0.947244,-0.867039 1.789643,-1.662476 z m -1.510885,-5.388548 c -1.377465,-1.381473 -3.361796,-3.337666 -4.409618,-4.347091 -4.069895,-3.920752 -4.416183,-4.164584 -5.819221,-4.097502 -0.594649,0.02845 -0.826612,0.08042 -1.223779,0.27399 -0.689497,0.336142 -1.80808,1.473735 -2.181673,2.218772 -0.53507,1.067029 -0.432297,2.241413 0.291357,3.329434 0.459222,0.690451 1.250442,1.504455 1.650653,1.698192 0.329597,0.159554 0.453455,0.174504 1.026089,0.12381 0.548245,-0.04854 0.708312,-0.03226 1.012042,0.102625 0.729073,0.323866 2.522846,1.936447 5.825008,5.236627 l 2.152571,2.151273 2.090527,-2.089187 2.090529,-2.089186 z m 20.966791,6.605404 c 0,-0.09599 -1.495691,-1.568757 -1.593727,-1.569281 -0.171388,-8.37e-4 -0.02505,0.440405 0.260653,0.786149 0.492641,0.596171 1.333074,1.089887 1.333074,0.783132 z m -16.316702,-0.94043 c 0.07702,-0.09279 0.0029,-0.216672 -0.371341,-0.620933 -0.25715,-0.277749 -0.508067,-0.505012 -0.557591,-0.505012 -0.04952,0 -0.192934,0.09858 -0.318691,0.21907 -0.28604,0.274037 -0.218929,0.43537 0.32448,0.779991 0.413791,0.262418 0.770026,0.31138 0.923143,0.126884 z m 12.094714,-5.891753 c 2.031164,-1.965177 2.228199,-2.401537 1.528331,-3.384668 -0.469221,-0.659122 -1.258758,-1.548791 -1.572725,-1.772182 -0.265432,-0.188864 -0.313226,-0.196658 -0.638871,-0.104272 -0.289859,0.08222 -0.562086,0.314692 -1.542408,1.317103 -0.654731,0.669476 -1.855335,1.943727 -2.667998,2.831664 l -1.477579,1.614427 1.467532,1.471175 1.467531,1.471185 0.993492,-1.021159 c 0.546424,-0.561635 1.645636,-1.652112 2.442695,-2.423273 z m 4.769755,-3.14961 c 0.0881,-0.351026 -0.17424,-0.692678 -1.90682,-2.483208 -1.549536,-1.60138 -1.642439,-1.68187 -2.003538,-1.736029 -0.310431,-0.04653 -0.405519,-0.02874 -0.52776,0.09868 -0.39142,0.408096 -0.388227,0.413064 1.456082,2.270799 1.740053,1.752721 2.142802,2.065424 2.660368,2.065548 0.219236,4.7e-5 0.27727,-0.03883 0.321668,-0.215787 z m 0.939735,-2.307866 c 0.324517,-0.167814 2.478452,-2.308609 2.776028,-2.759091 l 0.235649,-0.356736 -0.241903,-0.227711 c -0.133051,-0.125237 -0.807918,-0.779601 -1.499713,-1.45414 -1.101411,-1.073928 -1.283463,-1.219988 -1.464164,-1.174632 -0.550028,0.138046 -3.038503,2.550956 -3.205419,3.10808 -0.170571,0.569325 -0.111932,0.662549 1.203046,1.912551 l 1.236609,1.175516 0.358541,-0.0491 c 0.1972,-0.02703 0.467798,-0.105642 0.601326,-0.174694 z m 5.14123,-3.936901 c 0.08808,-0.04711 0.160141,-0.149857 0.160141,-0.228273 0,-0.07842 -0.964096,-1.106131 -2.142436,-2.283808 l -2.142433,-2.141251 -0.25851,0.19112 c -0.142177,0.105119 -0.262631,0.230689 -0.267669,0.279043 -0.02264,0.217033 0.03529,0.518687 0.136099,0.708855 0.258206,0.487112 3.011199,2.988839 3.800459,3.453596 0.212071,0.124876 0.503907,0.133346 0.714349,0.02075 z m 0.930068,-1.868851 C 71.362576,69.013548 84.7246,55.7055 84.898164,55.378351 c 0.06775,-0.127702 0.118609,-0.453633 0.118609,-0.760083 v -0.536522 l -1.152605,-1.484631 c -0.633933,-0.816548 -1.220712,-1.510828 -1.303961,-1.542836 -0.117973,-0.04536 -0.325537,0.121022 -0.941144,0.754473 -0.434384,0.446973 -0.859695,0.961703 -0.945134,1.143842 l -0.155348,0.331165 0.225912,0.620933 c 0.124253,0.341509 0.283208,0.769952 0.353238,0.952097 0.145637,0.378795 0.113694,1.835991 -0.05225,2.383561 -0.161357,0.532448 -3.993293,4.513782 -4.849646,5.038722 -1.19323,0.731447 -1.899419,0.981008 -2.775915,0.981008 -0.691422,0 -1.006235,-0.09987 -1.805454,-0.572789 -0.437328,-0.258772 -0.448711,-0.26079 -0.620932,-0.109925 -2.405176,2.106868 -3.596603,3.293852 -3.66336,3.649703 -0.05078,0.270697 -0.01527,0.316671 1.137142,1.471118 0.654263,0.65543 1.219965,1.191694 1.257119,1.191694 0.03715,0 0.204628,0.09317 0.372155,0.206975 0.354289,0.240748 0.585506,0.258658 0.953293,0.07385 z m 4.404512,-7.299871 c 0.527722,-0.274428 1.405174,-1.015687 2.597218,-2.194106 1.247815,-1.233548 2.025736,-2.159009 2.27691,-2.708749 0.248148,-0.543116 0.239675,-1.626941 -0.01717,-2.192926 -0.432314,-0.952745 -1.209133,-1.313506 -1.852093,-0.860139 -0.794201,0.560017 -5.604109,5.421827 -6.032965,6.09807 -0.336733,0.530964 -0.316235,0.769523 0.105397,1.226943 0.565523,0.61352 1.213569,0.875966 2.053377,0.831572 0.335797,-0.0177 0.66266,-0.09317 0.869303,-0.200665 z m -0.206974,-1.84958 C 74.473557,59.713565 74.09303,58.71005 74.5183,58.098424 c 0.261076,-0.375483 1.446051,-1.593119 1.916329,-1.969154 0.471716,-0.377168 0.871392,-0.420725 1.420727,-0.154796 0.568642,0.275274 0.894954,1.070397 0.665077,1.620584 -0.146954,0.351702 -1.704129,1.923485 -2.246157,2.267231 -0.410379,0.260248 -0.670701,0.30055 -1.026853,0.158945 z m 1.806483,-1.785905 c 0.533581,-0.32989 0.878172,-0.835197 0.802985,-1.177506 -0.07688,-0.350026 -0.369539,-0.53616 -0.721469,-0.458866 -0.311952,0.06852 -1.143147,0.8806 -1.307539,1.277466 -0.08809,0.212685 -0.08233,0.281803 0.03894,0.466889 0.12492,0.190645 0.182904,0.211809 0.473533,0.17283 0.182149,-0.02446 0.503244,-0.150799 0.713541,-0.280813 z m 10.701338,-4.489848 c 0.133105,-0.133108 0.241064,-0.291443 0.239912,-0.351863 -0.0012,-0.06043 -1.040686,-1.171656 -2.310075,-2.469404 l -2.307977,-2.35955 -0.339242,0.327271 c -0.186581,0.18 -0.339242,0.359009 -0.339242,0.397801 0,0.239319 0.883514,1.248009 2.501267,2.855645 2.046125,2.033329 2.092859,2.062592 2.555357,1.6001 z M 87.49924,51.143703 c 8.28e-4,-0.129726 -0.05883,-0.362505 -0.132285,-0.517293 -0.144085,-0.303638 -1.35499,-1.49334 -1.86034,-1.827763 -0.317816,-0.210326 -0.737956,-0.239274 -0.79839,-0.05501 -0.04164,0.126967 0.74768,1.029858 1.794287,2.052448 0.883867,0.86358 0.993746,0.901899 0.996728,0.347618 z"
     id="path301" /><script
     id="script381"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><script
     id="script730"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></svg>
