<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="201.98114mm"
   height="263.02612mm"
   viewBox="0 0 201.98114 263.02612"
   version="1.1"
   id="svg2426"
   inkscape:version="1.2.2 (b0a8486541, 2022-12-01)"
   sodipodi:docname="schild3-1.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview2428"
     pagecolor="#ffffff"
     bordercolor="#111111"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="1"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     showgrid="false"
     inkscape:zoom="0.72337262"
     inkscape:cx="284.08595"
     inkscape:cy="503.19848"
     inkscape:window-width="1920"
     inkscape:window-height="1054"
     inkscape:window-x="1920"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs2423">
    <meshgradient
       inkscape:collect="always"
       id="meshgradient1828-6-1-4-3-6"
       gradientUnits="userSpaceOnUse"
       x="119.69842"
       y="63.614796">
      <meshrow
         id="meshrow1830-3-5-1-7-2">
        <meshpatch
           id="meshpatch1832-6-4-0-3-5">
          <stop
             path="c 126.049,0  252.098,0  378.146,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop1834-3-3-0-5-9" />
          <stop
             path="c 0,238.23  0,476.459  0,714.689"
             style="stop-color:#010202;stop-opacity:1"
             id="stop1836-5-1-7-3-3" />
          <stop
             path="c -126.049,0  -252.098,0  -378.146,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop1838-6-9-8-5-1" />
          <stop
             path="c 0,-238.23  0,-476.459  0,-714.689"
             style="stop-color:#010202;stop-opacity:1"
             id="stop1840-2-4-6-6-9" />
        </meshpatch>
      </meshrow>
    </meshgradient>
  </defs>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-3.84337,-2.6986517)">
    <path
       fill-rule="nonzero"
       fill="rgb(100%, 100%, 100%)"
       fill-opacity="1"
       d="M 3.84337,2.6986519 V 164.68714 c 0,55.68457 45.301902,100.9864 100.98641,100.9864 55.68454,0 100.98641,-45.30183 100.98641,-100.9864 V 2.6986519 Z m 0,0"
       id="path972-3-9-7-8-2-4"
       style="clip-rule:evenodd;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2" />
    <path
       fill-rule="nonzero"
       fill="rgb(89.411926%, 13.725281%, 13.33313%)"
       fill-opacity="1"
       d="M 106.47754,136.36522 205.0224,39.675186 104.48885,39.873565 Z"
       id="path974-6-1-8-8-9-7"
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2"
       sodipodi:nodetypes="cccc" />
    <path
       fill-rule="nonzero"
       fill="rgb(89.411926%, 13.725281%, 13.33313%)"
       fill-opacity="1"
       d="m 104.78881,232.95853 0.0409,29.9852 c 0,0 104.60501,0.32213 99.47159,-116.8244 v -10.24767 z"
       id="path976-7-2-4-4-1-8"
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:1.01729;stroke-linejoin:round;stroke-miterlimit:2"
       sodipodi:nodetypes="ccccc" />
    <path
       fill-rule="nonzero"
       fill="rgb(100%, 92.941284%, 0%)"
       fill-opacity="1"
       d="m 104.61278,137.30365 v 96.94692 l 98.06965,-95.33138 -0.74468,-96.218286 z"
       id="path978-5-7-5-3-2-4"
       style="clip-rule:evenodd;fill:#e23130;fill-opacity:1;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2"
       sodipodi:nodetypes="ccccc" />
    <path
       style="clip-rule:evenodd;fill:#e23130;fill-opacity:1;fill-rule:evenodd;stroke-width:0.157006;stroke-linejoin:round;stroke-miterlimit:2"
       d="m 6.2772122,90.525133 v -50.3247 H 54.957086 103.63696 v 50.3247 50.324697 c 0.0742,-0.25969 -96.9016209,2.78657 -96.7212821,2.97572 z"
       id="path1204-2-0-0-1-7-5"
       sodipodi:nodetypes="cccccccc" />
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:34.3351px;line-height:0;font-family:'Tlwg Mono';-inkscape-font-specification:'Tlwg Mono Bold';text-align:center;letter-spacing:12.5805px;text-anchor:middle;clip-rule:evenodd;fill-rule:evenodd;stroke-width:0.757397;stroke-linejoin:round;stroke-miterlimit:2"
       x="103.83766"
       y="35.399429"
       id="text1262-9-9-3-4-0-0"><tspan
         id="tspan1260-1-3-6-9-9-3"
         style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:34.3351px;font-family:'DejaVu Sans Mono';-inkscape-font-specification:'DejaVu Sans Mono Bold';text-align:center;text-anchor:middle;stroke-width:0.757397"
         x="110.12791"
         y="35.399429"
         sodipodi:role="line">KLAANK</tspan></text>
    <path
       style="clip-rule:evenodd;fill:#218c32;fill-opacity:1;fill-rule:evenodd;stroke-width:0.406685;stroke-linejoin:round;stroke-miterlimit:2"
       d="M 91.815353,261.63975 C 91.048821,263.5345 59.600825,253.55753 46.279122,243.5266 41.78275,240.14084 30.670156,230.01587 27.236187,225.60342 15.90421,211.04277 8.9172145,191.63627 7.1584856,173.58743 6.9317965,171.2603 5.2415627,162.49423 6.1501753,154.59263 l -0.3501488,-17.76911 97.6643835,0.34849 -0.53712,63.75208 v 60.67384 c -2.6375,0.9409 -13.616824,-0.95592 -11.111937,0.0418 z"
       id="path13578-2-6-1-2-3-6"
       sodipodi:nodetypes="cssssccccc" />
    <g
       transform="matrix(-0.01799111,0,0,-0.01799111,102.88119,242.37802)"
       fill="#000000"
       stroke="none"
       id="g1670-7-0-0-0-6-1"
       style="clip-rule:evenodd;fill:#000000;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2">
      <path
         d="m 3220,5285 c -47,-7 -105,-18 -130,-25 -25,-8 -53,-15 -63,-17 -9,-1 -79,-34 -155,-72 -119,-61 -151,-82 -242,-165 -58,-53 -120,-108 -137,-124 -35,-29 -120,-147 -152,-209 -10,-21 -44,-100 -76,-175 -47,-114 -61,-164 -84,-292 -16,-84 -31,-158 -35,-165 -4,-6 -24,-11 -44,-11 -23,0 -50,-10 -75,-27 l -39,-27 -39,44 c -50,58 -75,140 -90,295 -18,184 -8,293 40,470 23,83 51,170 62,195 33,70 106,178 161,236 28,30 49,56 47,58 -10,10 -199,-45 -250,-72 -97,-51 -240,-166 -356,-285 -62,-64 -113,-121 -113,-127 0,-7 -10,-26 -22,-43 -27,-38 -38,-57 -90,-162 -22,-44 -43,-87 -47,-95 -13,-25 -39,-141 -46,-205 -9,-88 10,-221 45,-305 37,-89 57,-123 133,-223 l 59,-79 -38,-61 c -21,-33 -90,-113 -154,-177 -163,-162 -178,-189 -211,-365 -6,-33 -17,-71 -24,-85 -7,-14 -23,-49 -35,-77 -13,-29 -30,-61 -39,-70 -9,-10 -28,-36 -44,-58 -15,-22 -74,-83 -131,-135 C 662,2518 584,2392 509,2171 484,2097 407,1950 376,1917 351,1889 272,1763 263,1735 c -10,-32 -5,-56 30,-138 20,-47 67,-89 160,-146 32,-19 204,-74 267,-86 8,-1 22,-5 30,-8 8,-3 64,-12 123,-20 60,-9 111,-18 114,-21 3,-3 10,-46 15,-97 5,-51 13,-100 18,-109 5,-10 7,-20 4,-22 -2,-3 5,-26 16,-52 11,-26 20,-55 20,-65 0,-14 37,-70 96,-146 31,-40 112,-221 123,-276 18,-84 1,-165 -54,-273 -25,-48 -45,-90 -43,-91 9,-8 180,30 232,51 64,27 141,93 179,154 12,19 29,43 38,54 22,23 143,257 161,311 21,60 15,185 -14,300 -40,155 -42,218 -15,377 15,89 29,144 41,156 30,34 82,35 176,3 161,-55 275,-84 331,-84 66,0 159,42 191,86 11,15 24,27 29,27 11,0 145,-266 171,-340 10,-30 23,-75 29,-99 5,-24 19,-63 29,-87 11,-23 20,-47 20,-53 0,-21 21,-21 60,-1 22,11 40,22 40,25 0,2 -9,39 -19,82 -23,97 -50,165 -105,268 -24,44 -51,104 -60,133 -17,50 -17,56 -1,105 9,29 45,111 80,182 57,118 66,145 95,290 18,88 36,168 41,177 5,9 9,21 8,25 -1,4 0,11 1,16 1,4 4,24 6,45 1,20 6,52 10,69 9,47 -7,41 -54,-20 -43,-55 -95,-160 -142,-287 -34,-92 -62,-154 -72,-158 -5,-2 -8,-8 -8,-14 0,-23 -105,-157 -153,-194 -54,-42 -176,-105 -237,-122 -89,-26 -249,-20 -305,11 -11,6 -22,12 -25,13 -6,1 -38,13 -67,25 -13,5 -23,16 -23,24 0,9 -5,25 -10,36 -10,18 -12,18 -60,-6 -65,-33 -134,-34 -161,-2 -24,29 -24,50 2,95 21,37 21,38 2,80 l -18,43 -65,-50 c -36,-27 -95,-80 -131,-118 -183,-188 -350,-353 -358,-353 -5,0 -11,-4 -13,-8 -1,-5 -22,-12 -45,-16 l -43,-6 v 32 c 0,43 18,108 30,108 6,0 10,7 10,16 0,8 50,64 112,124 l 111,109 -27,36 c -15,20 -45,47 -66,61 l -38,25 -39,-24 c -22,-14 -62,-50 -89,-81 -48,-54 -70,-91 -133,-227 -23,-49 -42,-74 -72,-95 -98,-67 -274,-16 -315,92 l -16,43 81,149 c 45,81 102,199 127,262 96,240 131,296 324,520 192,224 191,221 294,515 30,83 61,165 70,183 23,44 102,121 179,173 35,24 86,62 112,84 47,39 50,40 123,40 h 75 l 20,41 c 31,65 77,85 211,95 61,4 121,11 133,14 12,4 47,-1 80,-11 45,-15 89,-18 201,-17 79,0 145,3 149,6 3,4 -6,20 -21,37 -14,17 -26,36 -26,40 0,5 -19,15 -42,21 -24,7 -45,14 -47,16 -3,2 11,16 29,32 l 34,28 -56,17 c -31,9 -62,16 -70,16 -24,0 -58,30 -78,70 -11,22 -20,41 -20,44 0,3 20,8 44,11 31,5 77,0 143,-14 54,-12 122,-21 150,-21 h 52 l 6,-47 c 3,-27 28,-93 55,-150 28,-55 50,-107 50,-115 0,-8 -36,-32 -80,-53 -44,-21 -80,-41 -80,-43 0,-3 9,-20 21,-39 14,-22 26,-32 38,-29 9,3 63,19 119,36 174,52 469,211 562,304 25,25 49,45 54,46 5,0 15,8 22,17 7,10 15,15 19,12 3,-4 -9,-31 -28,-60 -50,-80 -65,-117 -102,-252 -41,-150 -60,-341 -50,-506 l 7,-113 31,30 30,31 51,-42 c 28,-23 53,-45 56,-48 3,-4 37,-22 75,-42 101,-50 197,-156 265,-290 35,-68 78,-103 158,-126 52,-16 77,-30 107,-62 27,-27 85,-63 177,-110 76,-38 139,-69 141,-69 11,0 16,116 6,153 -11,46 -15,49 -149,111 -30,14 -71,38 -90,54 l -35,30 18,37 c 9,20 15,40 13,44 -3,4 -24,16 -47,26 -41,19 -41,19 -35,62 l 6,43 -90,45 c -50,25 -145,84 -213,133 -68,48 -149,103 -180,122 -50,31 -57,40 -66,79 -10,49 -10,51 69,181 88,144 189,365 225,490 44,150 56,202 61,255 2,22 10,85 18,140 19,124 19,118 2,112 -8,-3 -88,-59 -178,-125 -89,-65 -225,-161 -300,-213 -75,-52 -190,-132 -255,-178 -65,-46 -123,-86 -130,-88 -20,-8 -80,46 -109,95 -68,122 -81,229 -45,369 33,126 176,394 228,426 7,4 13,13 14,20 1,23 133,110 248,164 64,30 132,63 151,73 19,10 69,25 110,34 42,8 107,23 145,31 135,32 241,45 368,45 70,0 127,3 127,8 -1,10 -212,135 -280,166 -81,36 -191,55 -383,66 -215,12 -290,11 -397,-5 z m 343,-105 c 5,-4 7,-22 5,-41 -3,-30 -7,-35 -51,-48 l -49,-15 -29,33 c -16,19 -29,36 -30,40 0,3 -2,17 -5,30 l -4,23 77,-7 c 43,-4 82,-10 86,-15 z m -264,-30 c 12,-17 29,-50 37,-73 14,-39 14,-43 -2,-52 -10,-5 -46,-29 -82,-53 -35,-24 -65,-42 -67,-40 -1,2 -16,31 -33,64 -19,37 -49,76 -74,97 l -43,36 40,17 c 41,18 104,30 166,33 29,1 39,-5 58,-29 z m -272,-115 c 39,-36 72,-73 72,-83 0,-9 3,-28 6,-42 6,-22 -3,-34 -62,-86 -88,-77 -148,-124 -160,-124 -5,0 -25,23 -43,51 -18,28 -55,79 -81,112 -27,33 -49,63 -49,66 0,4 10,13 21,21 12,8 63,45 113,82 50,36 96,67 101,67 6,0 42,-29 82,-64 z m -1138,-12 c -12,-21 -28,-45 -36,-54 -7,-8 -13,-21 -13,-27 0,-20 -25,-13 -49,12 l -22,24 33,25 c 26,20 85,51 106,56 2,1 -6,-16 -19,-36 z m -149,-141 c 19,-9 35,-22 35,-27 -2,-48 -19,-146 -26,-151 -6,-3 -29,12 -53,34 -24,22 -53,43 -64,46 -26,8 -20,28 23,79 35,41 38,42 85,19 z m 956,-93 c 16,-23 48,-62 71,-88 24,-25 46,-56 49,-68 4,-13 10,-23 14,-23 23,0 14,-45 -22,-112 -39,-74 -80,-118 -109,-118 -15,0 -261,184 -267,200 -2,5 8,28 22,52 14,24 34,61 45,83 28,60 133,142 157,123 7,-5 24,-27 40,-49 z M 1638,4679 c 2,-5 8,-9 14,-9 6,0 21,-10 33,-22 13,-13 30,-29 39,-36 23,-19 20,-28 -19,-51 -34,-20 -38,-20 -108,-6 -121,26 -121,26 -92,89 11,24 26,35 53,43 38,11 75,7 80,-8 z m -77,-173 c 47,-8 105,-24 128,-36 l 43,-21 -7,-47 c -4,-26 -8,-48 -10,-50 -2,-2 -59,0 -127,3 l -123,7 -17,40 c -16,37 -16,42 0,79 9,21 19,39 22,39 3,0 44,-6 91,-14 z m 991,-125 c 43,-34 80,-61 83,-61 3,0 17,-11 30,-24 13,-13 29,-26 35,-28 9,-3 9,-27 1,-98 -7,-52 -13,-95 -14,-96 -2,-2 -145,24 -162,29 -5,2 -50,16 -98,31 -85,27 -88,29 -105,69 -9,23 -15,47 -13,52 2,6 11,44 21,85 18,80 35,120 50,120 6,0 10,6 10,13 0,7 6,19 13,26 10,10 18,5 42,-23 17,-19 65,-62 107,-95 z m -867,-137 c 33,-8 64,-19 69,-24 5,-5 4,-25 -1,-46 -8,-38 -9,-38 -78,-52 -103,-20 -151,-17 -218,11 -37,16 -38,17 -35,64 3,41 6,48 28,54 46,13 175,9 235,-7 z m 138,-213 c 5,-5 11,-21 12,-35 2,-14 6,-29 9,-35 7,-11 -5,-20 -31,-26 -10,-2 -54,-13 -98,-24 -97,-25 -155,-26 -213,-4 -41,15 -43,18 -38,46 3,16 6,36 6,44 0,10 4,11 19,3 33,-17 99,-7 186,30 11,5 27,11 35,14 21,8 102,-2 113,-13 z m 1902,-148 c -11,-73 -17,-110 -20,-134 -7,-47 -76,-213 -127,-309 -63,-117 -114,-185 -150,-201 -16,-6 -28,-15 -28,-20 0,-5 -7,-9 -15,-9 -15,0 -20,12 -9,23 4,3 8,23 10,44 1,21 5,49 8,63 2,14 7,39 10,57 3,18 9,40 14,50 5,10 19,51 30,92 29,101 119,248 196,317 67,61 88,68 81,27 z M 1605,3770 c 3,-5 -1,-10 -9,-10 -8,0 -18,5 -21,10 -3,6 1,10 9,10 8,0 18,-4 21,-10 z m 50,-2136 c 17,-42 19,-102 4,-159 -29,-112 -31,-134 -21,-215 5,-41 6,-79 3,-85 -4,-5 -13,-29 -21,-52 -7,-24 -16,-43 -20,-43 -15,0 -23,89 -25,275 -2,105 1,206 6,226 8,32 43,89 55,89 2,0 11,-16 19,-36 z m -188,-66 c -4,-18 -11,-89 -17,-158 -14,-152 -16,-162 -36,-136 -15,22 -18,103 -8,229 6,63 10,77 28,85 34,17 39,14 33,-20 z m -114,-335 c 2,-22 6,-44 9,-49 3,-5 9,-29 13,-54 4,-25 29,-89 56,-143 l 49,-97 -22,-30 c -12,-17 -25,-30 -29,-30 -10,0 -53,68 -94,150 -35,70 -37,78 -33,150 5,68 31,160 43,148 3,-2 6,-23 8,-45 z m -48,-349 c 38,-46 76,-97 85,-112 8,-15 18,-28 23,-30 4,-2 7,-10 7,-17 0,-7 3,-15 8,-17 8,-3 72,-96 72,-104 0,-10 -41,-64 -48,-64 -8,0 -39,59 -68,130 -10,25 -48,79 -83,120 -35,41 -71,82 -78,91 -14,17 -9,90 6,88 3,0 37,-38 76,-85 z m 398,-14 c -9,-41 -21,-45 -35,-10 -10,25 -11,42 -4,67 l 11,33 17,-33 c 9,-18 14,-43 11,-57 z"
         id="path1664-0-6-6-6-0-0"
         style="fill:#000000" />
      <path
         d="m 1933,3379 c -111,-18 -255,-95 -306,-163 -15,-19 -34,-41 -43,-50 -18,-19 -63,-125 -68,-164 -2,-15 -7,-35 -11,-44 -4,-11 -3,-18 3,-18 6,0 28,32 48,71 26,49 50,79 76,97 l 39,25 16,-24 c 9,-13 34,-41 55,-61 21,-21 38,-39 38,-42 0,-2 -16,-10 -35,-16 -19,-6 -35,-15 -35,-20 0,-15 123,-29 175,-20 28,5 55,9 60,9 35,2 204,163 205,194 0,10 -51,-2 -68,-16 -11,-8 -19,-5 -33,13 -10,14 -19,31 -19,37 0,7 -15,30 -34,51 l -35,38 77,29 c 52,20 93,29 129,29 50,-1 52,-1 28,12 -29,15 -163,45 -192,43 -10,-1 -42,-5 -70,-10 z m -6,-266 c -14,-35 -18,-38 -52,-36 -45,3 -61,15 -68,51 -5,22 0,33 31,59 l 37,32 34,-33 34,-34 z"
         id="path1666-9-2-3-8-6-6"
         style="fill:#000000" />
      <path
         d="m 848,2070 c -103,-37 -133,-56 -180,-112 -53,-62 -59,-107 -25,-182 14,-31 29,-56 33,-56 24,0 106,68 138,114 29,43 126,244 126,262 0,7 -13,3 -92,-26 z"
         id="path1668-3-6-2-9-2-3"
         style="fill:#000000" />
    </g>
    <g
       transform="matrix(0.01487472,-0.01487472,-0.01487472,-0.01487472,57.416795,174.31578)"
       fill="#000000"
       stroke="none"
       id="g2509-0-8-0-2-6-2"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2">
      <path
         d="m 1361,3096 c -7,-8 -11,-32 -9,-53 3,-37 4,-38 46,-41 28,-2 42,-8 42,-18 0,-12 -75,-14 -533,-14 H 375 l -10,23 c -8,17 -20,23 -53,25 -71,5 -72,3 -72,-198 0,-98 3,-185 6,-194 5,-12 20,-16 61,-16 46,0 56,3 60,20 5,18 14,20 104,20 89,0 99,-2 99,-18 0,-29 21,-42 68,-42 39,0 45,3 55,30 11,29 13,30 79,30 59,0 68,-2 68,-18 0,-29 21,-42 65,-42 44,0 65,13 65,42 0,17 56,18 1324,18 1315,0 1324,0 1329,-20 4,-17 14,-20 62,-20 48,0 58,3 62,20 5,19 14,20 153,20 139,0 148,-1 153,-20 4,-17 14,-20 62,-20 48,0 58,3 62,20 5,20 14,20 538,20 529,0 533,0 538,-21 5,-18 12,-20 64,-17 51,3 58,6 61,26 2,12 9,22 17,22 7,0 25,14 39,31 24,28 26,38 26,123 0,79 -3,97 -20,119 -11,14 -28,28 -38,31 -9,3 -22,16 -27,28 -8,20 -18,23 -60,23 -42,0 -52,-3 -60,-22 -9,-22 -16,-23 -104,-23 -76,0 -98,3 -114,18 -17,15 -46,17 -239,20 -206,3 -222,2 -254,-17 -32,-19 -52,-21 -197,-21 -159,0 -162,0 -172,23 -8,19 -18,22 -60,22 -42,0 -52,-3 -60,-22 -9,-22 -14,-23 -155,-23 -141,0 -146,1 -155,23 -8,19 -18,22 -60,22 -42,0 -52,-3 -60,-23 l -10,-22 -247,2 c -155,2 -249,7 -251,13 -1,6 14,11 33,13 19,2 41,8 47,14 16,13 17,70 1,86 -9,9 -227,12 -919,12 -774,0 -908,-2 -918,-14 z m 1819,-41 c 0,-13 -107,-15 -900,-15 -793,0 -900,2 -900,15 0,13 107,15 900,15 793,0 900,-2 900,-15 z m -1645,-94 c 0,-30 -4,-35 -27,-38 -27,-4 -28,-2 -28,37 0,39 1,41 28,38 24,-3 27,-7 27,-37 z m 165,24 c 0,-12 -14,-15 -65,-15 -51,0 -65,3 -65,15 0,12 14,15 65,15 51,0 65,-3 65,-15 z m 90,-25 c 0,-36 -2,-40 -25,-40 -22,0 -25,4 -25,40 0,36 3,40 25,40 23,0 25,-4 25,-40 z m 170,25 c 0,-12 -14,-15 -65,-15 -51,0 -65,3 -65,15 0,12 14,15 65,15 51,0 65,-3 65,-15 z m 90,-26 c 0,-38 -1,-40 -27,-37 -47,5 -45,78 2,78 23,0 25,-4 25,-41 z m 165,26 c 0,-5 -28,-11 -62,-13 -52,-2 -63,0 -63,13 0,13 11,15 63,13 34,-2 62,-7 62,-13 z m 93,-21 c -3,-32 -7,-37 -30,-40 -26,-2 -28,0 -28,37 0,37 2,39 31,39 29,0 30,-2 27,-36 z m 162,21 c 0,-13 -11,-15 -62,-13 -38,2 -63,8 -66,16 -3,9 14,12 62,12 53,0 66,-3 66,-15 z m 90,-15 c 0,-16 0,-33 0,-37 0,-5 -11,-9 -25,-10 -23,-2 -25,2 -25,38 0,35 3,39 25,39 21,0 25,-5 25,-30 z m 170,15 c 0,-12 -14,-15 -65,-15 -51,0 -65,3 -65,15 0,12 14,15 65,15 51,0 65,-3 65,-15 z m 90,-24 c 0,-34 -3,-38 -25,-38 -22,0 -25,4 -25,38 0,35 3,39 25,39 22,0 25,-4 25,-39 z m 170,24 c 0,-12 -14,-15 -65,-15 -51,0 -65,3 -65,15 0,12 14,15 65,15 51,0 65,-3 65,-15 z m 90,-25 c 0,-39 -1,-40 -27,-37 -24,3 -28,9 -31,40 -3,35 -2,37 27,37 29,0 31,-2 31,-40 z m -2742,-147 -3,-168 -27,-3 -28,-3 v 170 171 h 30 30 z m 3380,0 -3,-168 -27,-3 -28,-3 v 170 171 h 30 30 z m 422,-4 v -170 l -27,3 -28,3 -3,168 -2,167 h 30 30 z m 1208,4 -3,-168 -27,-3 -28,-3 v 170 171 h 30 30 z m -323,137 c 37,-41 -2,-126 -72,-156 -50,-21 -294,-19 -340,3 -42,20 -73,66 -73,110 0,61 8,63 249,63 204,0 219,-1 236,-20 z m -3585,-25 c 0,-9 -9,-28 -20,-43 -47,-63 -27,-147 43,-177 29,-13 4,-14 -230,-15 -279,0 -284,1 -242,46 47,50 30,147 -31,179 -37,19 -64,19 -105,-1 -64,-30 -80,-110 -35,-174 32,-45 27,-50 -50,-50 -63,0 -70,2 -70,20 0,11 4,20 9,20 5,0 16,16 26,36 22,47 13,92 -26,130 -25,24 -39,29 -80,29 -44,0 -54,-4 -80,-33 -39,-43 -41,-107 -4,-150 14,-17 25,-35 25,-41 0,-7 -34,-11 -100,-11 H 370 v 118 c 0,65 3,122 7,125 3,4 244,7 535,7 469,0 528,-2 528,-15 z m 260,-2 c 0,-9 -10,-27 -22,-41 -17,-18 -23,-36 -23,-72 0,-54 20,-84 70,-106 27,-12 18,-13 -90,-13 -109,0 -117,1 -89,13 43,19 74,62 74,103 0,34 -27,93 -42,93 -4,0 -8,9 -8,20 0,18 7,20 65,20 54,0 65,-3 65,-17 z m 257,0 c 4,-9 1,-19 -5,-21 -19,-6 -42,-57 -42,-91 0,-49 21,-83 65,-102 l 40,-19 -120,1 c -108,0 -117,1 -90,13 50,22 70,52 70,106 0,36 -6,54 -22,72 -41,43 -31,58 37,58 48,0 62,-4 67,-17 z m 258,6 c 4,-6 -2,-21 -14,-33 -62,-66 -38,-171 45,-196 20,-6 -8,-8 -91,-9 -111,0 -117,1 -88,14 66,28 89,115 45,174 -37,50 -30,61 37,61 33,0 63,-5 66,-11 z m 255,-4 c 0,-8 -11,-31 -25,-51 -14,-20 -25,-49 -25,-63 0,-38 36,-90 73,-106 30,-13 25,-14 -83,-15 -110,0 -114,1 -85,16 45,23 65,53 65,103 0,32 -7,53 -26,78 -14,18 -22,38 -19,43 3,6 33,10 66,10 45,0 59,-3 59,-15 z m 260,-1 c 0,-9 -11,-29 -25,-46 -48,-57 -24,-142 49,-174 28,-12 20,-13 -89,-13 -109,0 -117,1 -89,13 73,32 97,117 49,174 -42,50 -35,62 40,62 53,0 65,-3 65,-16 z m 255,6 c 3,-5 -5,-25 -19,-43 -48,-63 -29,-147 39,-178 l 40,-19 -120,1 c -112,0 -118,1 -88,14 37,16 73,68 73,106 0,14 -11,43 -25,63 -39,57 -34,66 34,66 33,0 63,-4 66,-10 z m 635,-115 v -125 l -282,1 c -174,0 -272,4 -254,9 85,26 108,129 44,197 -11,12 -17,26 -13,32 4,7 89,11 256,11 h 249 z m 428,-2 3,-123 h -151 -150 v 125 126 l 148,-3 147,-3 z m 452,100 c 1,-44 35,-108 71,-134 32,-23 44,-24 198,-27 90,-2 175,-1 188,3 13,3 41,21 63,41 36,32 50,64 55,119 1,18 10,20 88,23 l 87,3 v -126 -125 h -535 -535 v 125 125 h 160 160 z m 908,5 c 8,-8 12,-46 12,-103 0,-85 -8,-115 -32,-115 -4,0 -8,52 -8,115 0,63 4,115 8,115 4,0 13,-5 20,-12 z M 687,2868 c 48,-45 14,-128 -53,-128 -47,0 -78,29 -78,75 0,68 80,101 131,53 z m 262,12 c 10,-5 24,-22 30,-39 31,-75 -66,-136 -126,-79 -65,60 17,161 96,118 z m 613,-20 c 24,-24 29,-36 24,-58 -9,-35 -50,-72 -82,-72 -35,0 -74,42 -74,80 0,39 39,80 75,80 16,0 39,-12 57,-30 z m 252,9 c 20,-16 26,-29 26,-59 0,-30 -6,-43 -26,-59 -15,-12 -37,-21 -49,-21 -12,0 -34,9 -49,21 -20,16 -26,29 -26,59 0,30 6,43 26,59 15,12 37,21 49,21 12,0 34,-9 49,-21 z m 261,-4 c 16,-15 25,-36 25,-55 0,-39 -39,-80 -75,-80 -29,0 -85,49 -85,74 0,72 86,111 135,61 z m 252,5 c 29,-27 37,-56 23,-90 -22,-53 -103,-63 -135,-17 -52,74 47,168 112,107 z m 259,-3 c 20,-17 27,-33 27,-57 0,-39 -40,-80 -79,-80 -35,0 -74,42 -74,80 0,38 39,80 74,80 14,0 37,-11 52,-23 z m 259,-2 c 16,-15 25,-36 25,-55 0,-38 -39,-80 -74,-80 -69,0 -104,92 -52,137 35,30 71,29 101,-2 z m 260,0 c 16,-15 25,-36 25,-55 0,-36 -38,-80 -69,-80 -61,0 -103,56 -82,109 22,53 87,66 126,26 z M 660,2665 c 0,-32 -2,-35 -30,-35 -28,0 -30,3 -30,35 0,32 2,35 30,35 28,0 30,-3 30,-35 z m 280,0 c 0,-32 -2,-35 -30,-35 -28,0 -30,3 -30,35 0,32 2,35 30,35 28,0 30,-3 30,-35 z"
         id="path2505-6-7-6-6-1-0" />
      <path
         d="m 4687,2942 c -22,-25 -21,-75 1,-95 14,-13 39,-17 105,-17 77,0 87,2 101,22 9,12 16,32 16,43 0,11 -7,31 -16,43 -14,20 -24,22 -103,22 -72,0 -91,-3 -104,-18 z m 177,-28 c 12,-12 13,-20 5,-35 -9,-17 -19,-19 -81,-17 -78,3 -105,21 -79,52 19,22 133,22 155,0 z"
         id="path2507-2-9-1-6-8-6" />
    </g>
    <g
       transform="matrix(-0.03674095,0,0,-0.03674095,99.975014,131.72727)"
       fill="#000000"
       stroke="none"
       id="g2551-6-2-5-4-7-1"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2">
      <path
         d="m 1794,2241 c -35,-15 -39,-30 -40,-156 -1,-133 -11,-173 -66,-255 -18,-27 -181,-204 -363,-393 -246,-257 -333,-342 -342,-335 -9,7 -17,7 -27,-1 -18,-15 -41,10 -24,27 8,8 7,13 -6,18 -11,4 -27,-3 -47,-22 -36,-35 -39,-59 -5,-50 29,7 43,-9 26,-29 -7,-9 -8,-15 0,-20 5,-3 10,-11 10,-17 0,-7 -6,-6 -15,2 -12,10 -18,10 -30,0 -20,-17 -36,-3 -29,26 9,33 -15,32 -49,-4 -34,-36 -36,-56 -3,-48 29,7 43,-9 26,-29 -10,-12 -10,-18 0,-30 8,-9 9,-15 2,-15 -6,0 -14,5 -17,10 -5,8 -11,7 -20,0 -20,-17 -36,-3 -29,26 9,34 -15,31 -50,-5 -19,-19 -26,-36 -22,-47 5,-12 9,-14 20,-5 18,15 41,-10 24,-27 -8,-8 -8,-15 2,-27 C 731,822 708,795 564,644 297,367 220,281 220,262 220,234 111,135 57,115 25,103 10,92 10,80 10,59 77,-3 93,3 c 6,2 18,24 26,50 18,52 123,167 153,167 9,0 33,14 53,31 l 35,31 v -40 c 0,-56 15,-91 58,-135 50,-51 117,-71 190,-56 46,9 64,21 127,80 53,50 80,69 99,69 43,0 64,15 178,128 l 107,105 40,-36 c 23,-20 50,-37 61,-37 24,0 60,34 60,56 0,9 -28,45 -62,80 -75,78 -66,85 13,9 62,-59 87,-67 119,-35 32,32 24,57 -35,119 -76,79 -69,88 9,13 35,-34 70,-62 78,-62 7,0 24,7 36,16 37,26 28,59 -35,125 l -57,60 271,272 c 250,251 271,276 282,320 27,109 -34,220 -137,250 l -44,13 52,47 c 28,26 82,61 118,79 64,32 71,33 189,33 149,1 163,9 163,90 0,77 -46,160 -139,254 -112,112 -239,171 -307,142 z m 131,-60 c 112,-52 249,-204 276,-303 8,-32 7,-44 -6,-64 -15,-23 -18,-24 -99,-18 -145,11 -253,-29 -374,-141 -37,-34 -83,-67 -102,-75 -23,-8 -128,-105 -302,-278 -231,-230 -269,-264 -283,-252 -13,11 -1,27 97,129 670,692 661,680 662,891 1,63 5,121 9,128 13,20 58,14 122,-17 z m -140,-650 c 64,-37 95,-116 75,-192 -11,-38 -45,-77 -275,-308 -175,-177 -266,-261 -275,-256 -8,5 73,93 253,274 231,232 266,271 273,304 19,108 -70,195 -178,172 -26,-6 -91,-65 -299,-272 -147,-146 -269,-261 -272,-256 -3,5 112,127 257,272 277,277 303,297 376,285 19,-3 48,-13 65,-23 z m -19,-75 c 45,-45 47,-91 3,-140 -26,-30 -35,-34 -60,-29 -28,5 -43,-7 -252,-216 l -223,-221 -54,55 -55,56 265,264 c 255,254 267,265 304,265 30,0 45,-7 72,-34 z M 1490,1035 C 1372,917 1271,820 1265,820 c -5,0 87,97 205,215 119,118 220,215 225,215 6,0 -87,-97 -205,-215 z m -78,-447 c -18,-18 -468,432 -458,458 6,15 51,-26 239,-214 185,-185 229,-234 219,-244 z M 966,953 c -7,-7 -26,7 -26,19 0,6 6,6 15,-2 9,-7 13,-15 11,-17 z m 356,-455 c -18,-18 -476,440 -460,460 9,11 57,-32 242,-217 184,-184 228,-233 218,-243 z m -312,412 c 0,-5 -2,-10 -4,-10 -3,0 -8,5 -11,10 -3,6 -1,10 4,10 6,0 11,-4 11,-10 z m 222,-502 c -18,-18 -476,440 -460,460 9,11 57,-32 242,-217 184,-184 228,-233 218,-243 z M 865,869 c 11,-17 -1,-21 -15,-4 -8,9 -8,15 -2,15 6,0 14,-5 17,-11 z m 319,-138 c -6,-6 -144,130 -144,143 0,6 34,-23 75,-64 41,-41 72,-76 69,-79 z m -269,89 c 3,-5 1,-10 -4,-10 -6,0 -11,5 -11,10 0,6 2,10 4,10 3,0 8,-4 11,-10 z M 777,774 c 4,-12 -504,-520 -512,-512 -8,8 487,527 499,524 6,-1 11,-6 13,-12 z m 248,-64 c 38,-38 67,-72 64,-74 -3,-3 -38,28 -79,69 -41,41 -70,75 -64,75 5,0 41,-31 79,-70 z M 632,526 C 421,314 411,298 424,225 c 14,-75 93,-125 173,-110 33,6 67,35 239,207 133,132 204,196 209,188 8,-13 -322,-351 -389,-397 -96,-67 -230,-12 -257,106 -18,78 -3,100 214,318 110,111 205,200 210,196 5,-3 -81,-96 -191,-207 z m 598,164 c 0,-5 -2,-10 -4,-10 -3,0 -8,5 -11,10 -3,6 -1,10 4,10 6,0 11,-4 11,-10 z M 917,638 970,585 855,470 C 751,366 739,350 737,316 735,284 725,269 668,214 611,159 597,150 565,150 c -29,0 -45,8 -72,35 -32,32 -35,39 -30,77 5,38 22,58 199,235 106,106 195,193 198,193 2,0 28,-24 57,-52 z m 218,-38 c 3,-5 1,-10 -4,-10 -6,0 -11,5 -11,10 0,6 2,10 4,10 3,0 8,-4 11,-10 z M 885,432 C 820,368 773,324 780,335 c 23,34 214,225 219,219 3,-3 -48,-57 -114,-122 z m 95,-77 C 917,292 861,240 855,240 c -5,0 42,52 105,115 63,63 119,115 125,115 5,0 -42,-52 -105,-115 z M 90,76 C 90,65 71,61 65,70 c -3,5 1,10 9,10 9,0 16,-2 16,-4 z"
         id="path2549-1-0-5-9-9-5" />
    </g>
    <g
       id="g1141-2-4-5-2-5"
       transform="matrix(0.19622241,0,0,0.19622241,94.455538,60.550386)"
       style="clip-rule:evenodd;fill:url(#meshgradient1828-6-1-4-3-6);fill-opacity:1;fill-rule:nonzero;stroke-linejoin:round;stroke-miterlimit:2">
      <g
         id="g1115-3-7-0-0-4"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero">
        <g
           id="g1113-7-6-4-2-7"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero">
          <path
             class="st0"
             d="m 261.69,403.06 c 1.12,-1.37 2.25,-2.74 3.4,-4.08 0.56,-0.66 1.13,-1.3 1.7,-1.96 0.16,-0.19 1.59,-1.78 0.38,-0.45 2.17,-2.39 4.43,-4.71 6.74,-6.95 2.17,-2.1 4.4,-4.14 6.69,-6.11 -1.75,1.51 0.69,-0.53 1.27,-1 1.22,-0.97 2.45,-1.91 3.71,-2.83 1.08,-0.79 2.17,-1.55 3.28,-2.3 0.61,-0.41 3.69,-2.26 1.57,-1.04 2.13,-1.23 4.24,-2.47 6.43,-3.57 1.05,-0.53 2.12,-1.01 3.18,-1.51 0.37,-0.18 1.8,-0.76 -0.05,0 0.39,-0.16 0.78,-0.32 1.18,-0.47 2.17,-0.83 4.36,-1.6 6.6,-2.24 1.01,-0.29 2.03,-0.55 3.06,-0.79 0.5,-0.12 1.01,-0.23 1.52,-0.34 -0.13,0.03 -1.31,0.24 -0.33,0.07 2.09,-0.36 4.19,-0.64 6.3,-0.8 1.8,-0.13 3.61,-0.18 5.42,-0.15 0.95,0.02 1.89,0.07 2.84,0.12 0.17,0.01 1.63,0.13 0.81,0.05 -0.74,-0.07 1.19,0.15 1.14,0.14 7.22,0.98 14.2,3.36 20.58,6.86 2.48,1.36 5.34,3.29 8.16,5.53 2.86,2.27 5.54,4.75 8.05,7.41 2.52,2.68 4.86,5.53 7.01,8.52 1.81,2.52 4.2,6.3 5.25,8.24 3.49,6.44 6.18,13.33 7.98,20.43 0.88,3.46 1.54,6.98 1.96,10.53 0.1,0.87 0.19,1.75 0.26,2.63 0.07,0.84 0,-0.13 -0.01,-0.25 0.03,0.43 0.05,0.87 0.07,1.31 0.05,1.25 0.08,2.5 0.05,3.74 -0.09,3.61 -0.58,7.21 -1.21,10.75 -0.18,1.03 -0.38,2.05 -0.59,3.07 -0.12,0.57 -0.26,1.14 -0.37,1.71 -0.23,1.19 0.54,-2.16 -0.06,0.23 -0.61,2.42 -1.26,4.82 -1.99,7.2 -0.82,2.65 -1.72,5.28 -2.7,7.87 -0.51,1.35 -1.05,2.7 -1.61,4.04 -0.28,0.68 -0.58,1.36 -0.87,2.03 -0.54,1.22 -0.69,2.08 -0.05,0.17 -0.94,2.8 -2.74,5.58 -4.2,8.15 -0.77,1.36 -1.57,2.7 -2.39,4.02 -0.36,0.58 -0.74,1.16 -1.11,1.74 -1.27,1.99 1.52,-2.11 -0.17,0.26 -1.87,2.6 -3.82,5.12 -5.89,7.56 -1.97,2.31 1.35,-1.38 0.14,-0.14 -0.56,0.58 -1.11,1.18 -1.68,1.75 -1.14,1.16 -2.32,2.29 -3.54,3.37 -0.86,0.77 -3.07,2.02 0.13,-0.07 -0.68,0.44 -1.29,1.05 -1.93,1.54 -1.32,1.02 -2.67,1.97 -4.04,2.91 -0.21,0.15 -0.97,0.52 -1.05,0.69 0.05,-0.11 2.52,-1.51 0.9,-0.56 -0.73,0.42 -1.45,0.87 -2.19,1.28 -1.5,0.84 -3.02,1.62 -4.58,2.34 -0.69,0.32 -3.26,1.24 -0.58,0.29 -0.73,0.26 -1.43,0.57 -2.16,0.84 -1.79,0.66 -3.61,1.25 -5.45,1.77 -0.89,0.25 -1.78,0.48 -2.67,0.69 -0.44,0.1 -2.56,0.56 -1.64,0.38 0.94,-0.19 -1.7,0.29 -2.06,0.34 -1.08,0.17 -2.17,0.31 -3.26,0.43 -8.61,0.95 -16.67,0.49 -24.82,-0.99 -34.7,-6.3 -71.75,-25.48 -88.9,-56.84 -3.75,-6.85 -6.54,-14.25 -8.39,-21.83 -1.97,-8.05 -2.72,-14.97 -2.68,-22.58 0.04,-8.31 1.04,-16.61 2.79,-24.74 0.12,-0.54 0.23,-1.07 0.36,-1.61 -0.32,1.4 0,0.02 0.06,-0.22 0.28,-1.08 0.55,-2.16 0.84,-3.23 0.59,-2.18 1.24,-4.35 1.93,-6.5 1.43,-4.44 3.06,-8.82 4.86,-13.12 0.46,-1.11 0.94,-2.21 1.42,-3.3 0.24,-0.55 0.49,-1.1 0.74,-1.65 -0.17,0.37 -0.81,1.68 0.05,-0.1 1.07,-2.23 2.16,-4.44 3.31,-6.63 2.37,-4.52 4.91,-8.96 7.6,-13.3 1.39,-2.24 2.83,-4.45 4.29,-6.65 -1.18,1.76 0.53,-0.75 0.91,-1.29 0.88,-1.25 1.76,-2.5 2.66,-3.73 3.03,-4.16 6.21,-8.21 9.43,-12.23 12.07,-15.09 24.52,-29.87 36.92,-44.69 25.54,-30.54 51.25,-61.13 73.27,-94.36 9.14,-13.78 17.59,-28.18 23.74,-43.57 4.69,-11.72 8.06,-24.61 6.27,-37.3 -1.6,-11.35 -8.67,-20.13 -18.34,-25.82 -9.02,-5.31 -20.51,-9.01 -31.11,-8.51 -18.79,0.89 -33.83,15.95 -42.28,31.62 -10.11,18.74 -14.31,40.39 -17.12,61.3 -3.63,27.05 -4.52,54.45 -4.58,81.71 -0.07,31.03 1.14,62.06 2.87,93.04 1.74,31.2 4.05,62.37 6.5,93.52 2.09,26.56 4.35,53.11 6.17,79.7 0.05,0.71 0.1,1.43 0.15,2.14 0.09,1.33 -0.09,-1.35 0.03,0.5 0.1,1.47 0.19,2.94 0.29,4.41 0.17,2.66 0.33,5.31 0.48,7.97 0.28,4.86 0.52,9.71 0.71,14.57 0.48,12.33 0.67,24.68 -1.63,36.87 -0.19,1.01 -0.4,2.01 -0.61,3.01 -0.21,0.98 0.06,-0.22 0.09,-0.35 -0.12,0.48 -0.24,0.97 -0.36,1.45 -0.51,2 -1.09,3.99 -1.74,5.95 -0.55,1.67 -1.15,3.33 -1.8,4.97 -0.34,0.85 -0.69,1.7 -1.06,2.54 -0.18,0.42 -0.37,0.83 -0.55,1.24 0.42,-0.96 0.75,-1.54 0.09,-0.25 -0.75,1.47 -1.5,2.94 -2.32,4.38 -0.43,0.75 -0.87,1.49 -1.32,2.23 -0.28,0.46 -2.04,3.11 -0.91,1.46 1.11,-1.61 -0.31,0.43 -0.62,0.85 -0.49,0.67 -0.99,1.34 -1.5,2 -0.51,0.65 -1.02,1.3 -1.55,1.93 -0.37,0.45 -2.52,2.86 -0.92,1.12 1.54,-1.68 -0.17,0.17 -0.57,0.58 -0.56,0.58 -1.12,1.15 -1.7,1.71 -0.57,0.56 -1.15,1.1 -1.74,1.64 -0.43,0.39 -2.84,2.47 -1,0.92 1.76,-1.48 -0.14,0.1 -0.59,0.46 -0.61,0.49 -1.23,0.96 -1.86,1.43 -1.25,0.93 -2.53,1.8 -3.82,2.67 -2.37,1.61 1.66,-0.95 0.05,-0.03 -0.67,0.38 -1.32,0.78 -1.99,1.16 -1.33,0.75 -2.68,1.47 -4.05,2.14 -1.06,0.52 -3.35,1.04 -4.13,1.9 0.08,-0.09 2.4,-0.96 0.85,-0.37 -0.35,0.13 -0.7,0.28 -1.05,0.42 -0.7,0.27 -1.4,0.54 -2.11,0.79 -2.8,1.01 -5.65,1.87 -8.53,2.6 -1.42,0.36 -2.86,0.67 -4.3,0.97 1.61,-0.34 0.8,-0.16 -0.21,0.02 -0.8,0.14 -1.61,0.27 -2.41,0.38 -5.57,0.81 -11.21,1.12 -16.83,0.89 -1.35,-0.05 -2.69,-0.15 -4.04,-0.26 -0.25,-0.02 -0.5,-0.05 -0.75,-0.07 -0.99,-0.08 1.38,0.17 0.4,0.04 -0.73,-0.1 -1.47,-0.18 -2.2,-0.28 -2.52,-0.36 -5.02,-0.83 -7.49,-1.44 -4.51,-1.11 -8.94,-2.66 -13.06,-4.82 -0.48,-0.25 -0.94,-0.52 -1.41,-0.77 -1,-0.54 1.2,0.82 -0.1,-0.05 -0.9,-0.61 -1.81,-1.18 -2.68,-1.84 -1.53,-1.16 -2.97,-2.44 -4.26,-3.86 -0.57,-0.63 -1.11,-1.29 -1.62,-1.98 -0.43,-0.59 -1.84,-3.21 -0.87,-1.2 -1.59,-3.31 -2.99,-6.84 -3.27,-10.54 0.1,1.26 0.06,-0.62 0.08,-1.02 0.03,-0.37 0.51,-2.82 0.14,-1.49 -0.43,1.57 0.33,-0.99 0.41,-0.97 0.31,0.07 -1.19,2.22 -0.42,0.98 1.05,-1.72 -1.41,1.93 -0.7,0.96 1.6,-2.2 -0.7,0.68 -0.54,0.52 1.8,-1.77 -2.36,2.28 -0.61,0.5 0.17,-0.17 0.41,-0.27 0.59,-0.42 1.21,-1.01 -1.22,0.77 -1.29,0.79 0.59,-0.15 1.32,-0.7 1.87,-1 1.89,-1.04 -2.32,0.8 -0.33,0.12 0.48,-0.16 0.95,-0.35 1.42,-0.51 1.04,-0.35 2.1,-0.59 3.16,-0.88 2.13,-0.58 -2.25,0.27 0.23,-0.04 0.44,-0.06 0.89,-0.11 1.33,-0.18 0.63,-0.09 -1.76,-0.31 -0.17,0.01 1.19,0.24 2.43,0.34 3.63,0.52 2.86,0.43 5.72,0.91 8.57,1.44 5.1,0.95 10.16,2.07 15.18,3.37 9.13,2.37 18.11,5.36 26.79,9.08 14.55,6.24 27.56,14.23 39.34,24.98 19.51,17.8 31.8,39.44 37.67,65.03 1.24,5.39 2.15,10.86 2.72,16.37 0.13,1.23 0.22,2.46 0.33,3.69 0.16,1.83 -0.04,-1 0.02,0.3 0.04,0.8 0.09,1.6 0.12,2.39 0.1,2.47 0.14,4.95 0.1,7.42 -0.07,4.45 -0.38,8.9 -0.97,13.31 -0.27,2 -0.6,3.99 -1,5.97 -0.09,0.47 -0.2,0.93 -0.3,1.4 -0.35,1.74 0.51,-1.9 0.16,-0.67 -0.26,0.91 -0.46,1.83 -0.72,2.74 -0.22,0.76 -0.45,1.51 -0.69,2.25 -0.24,0.73 -0.5,1.46 -0.78,2.18 -0.19,0.5 -1.43,3.15 -0.68,1.71 0.83,-1.59 -0.49,0.87 -0.66,1.16 -0.31,0.55 -0.76,1.08 -1,1.66 1.17,-2.77 0.95,-1.46 0.14,-0.34 -1.68,2.3 1.83,-2.1 0.38,-0.41 -1.43,1.67 0.1,-0.05 0.93,-0.72 -0.22,0.18 -0.46,0.37 -0.7,0.53 -1.33,0.86 1.54,-0.87 1.43,-0.86 -0.29,0.02 -1.21,0.62 -1.46,0.79 -1,0.67 2.71,-0.76 0.34,-0.22 -2.04,0.47 0.4,-0.13 0.47,-0.02 -0.04,-0.06 -1.43,0.18 -1.57,0.19 -0.53,0.04 -1.06,0 -1.59,0.02 -1.75,0.07 1.02,0.33 -0.34,-0.04 -2.31,-0.63 -4.34,-1.29 -6.51,-2.34 -1.32,-0.64 0.54,0.42 -0.39,-0.23 -0.53,-0.37 -1.08,-0.73 -1.6,-1.12 -1.1,-0.82 -2.15,-1.71 -3.14,-2.65 -2.2,-2.08 -4.16,-4.41 -5.91,-6.88 -2.25,-3.17 -3.12,-4.74 -4.65,-7.98 -7.47,-15.91 -8.93,-33.26 -6.49,-50.36 1.53,-10.73 4.76,-20.96 9.29,-31.26 1.61,-3.66 4.43,-8.95 6.92,-13.14 1.19,-2.01 2.47,-3.96 3.72,-5.93 0.9,-1.42 -1.08,1.53 -0.11,0.16 0.35,-0.49 0.69,-1 1.04,-1.49 0.78,-1.1 1.58,-2.19 2.39,-3.27 1.33,-1.76 2.7,-3.49 4.11,-5.18 0.74,-0.89 1.5,-1.76 2.25,-2.63 0.27,-0.31 0.54,-0.69 0.85,-0.96 -2.45,2.15 -0.37,0.42 0.15,-0.12 0.79,-0.84 9.12,-9.49 9.56,-9.12 0.01,0.01 -2.44,2.01 -0.62,0.52 0.31,-0.25 0.62,-0.51 0.93,-0.76 0.82,-0.66 1.65,-1.32 2.49,-1.96 1.75,-1.34 3.53,-2.64 5.35,-3.88 0.74,-0.5 1.48,-0.99 2.22,-1.48 2.39,-1.58 -1.75,1.02 0.7,-0.44 1.8,-1.07 3.61,-2.12 5.47,-3.11 1.59,-0.85 3.21,-1.66 4.84,-2.43 0.75,-0.35 1.5,-0.7 2.26,-1.04 0.43,-0.19 0.86,-0.37 1.29,-0.56 -2.54,1.13 -0.3,0.14 0.17,-0.05 3.25,-1.29 6.56,-2.43 9.93,-3.38 1.57,-0.44 3.15,-0.85 4.73,-1.21 0.7,-0.16 2.85,-0.59 0.91,-0.22 0.92,-0.18 1.85,-0.34 2.78,-0.49 3.17,-0.51 6.38,-0.84 9.59,-0.97 3.01,-0.12 6.02,-0.04 9.02,0.21 1.04,0.08 -1.29,-0.16 -0.26,-0.03 0.35,0.05 0.71,0.08 1.06,0.13 0.61,0.09 1.22,0.17 1.83,0.27 1.44,0.24 2.87,0.53 4.28,0.89 2.52,0.63 4.99,1.45 7.36,2.5 1.06,0.47 2.08,1 3.1,1.54 1.53,0.81 -0.26,-0.24 0.51,0.3 0.54,0.38 1.1,0.73 1.64,1.12 1.85,1.35 3.55,2.9 5.03,4.64 0.68,0.8 1.32,1.64 1.9,2.51 0.31,0.47 0.59,0.95 0.88,1.43 -0.73,-1.22 -0.11,-0.2 0.17,0.41 0.95,2.12 1.67,4.29 2.08,6.58 0.11,0.59 0.18,1.19 0.26,1.79 0.26,1.9 0.07,-0.65 0.05,0.43 -0.03,1.42 0.02,2.82 -0.12,4.24 -0.08,0.77 -0.23,1.52 -0.33,2.28 -0.16,1.24 0.63,-1.67 -0.15,0.38 -0.11,0.3 -0.26,0.64 -0.34,0.94 -0.3,1.12 -0.7,-0.31 0.51,-1.05 -0.12,0.07 -0.25,0.5 -0.33,0.62 -0.96,1.57 0.62,-0.83 0.8,-1.08 -0.17,0.24 -0.34,0.5 -0.54,0.72 -1.14,1.3 1.43,-1.53 1.29,-1.39 -1.83,1.82 2,-1.5 0.83,-0.62 -1.73,1.3 1.21,-0.6 0.86,-0.47 -0.22,0.08 -1.62,1.04 -1.79,0.91 -0.5,-0.39 2.57,-0.87 1.14,-0.51 -0.29,0.07 -0.59,0.2 -0.88,0.29 -0.61,0.19 -1.23,0.3 -1.84,0.49 1.43,-0.43 1.22,-0.18 0.03,-0.04 -0.76,0.09 -1.52,0.19 -2.28,0.24 -1.43,0.1 -2.86,0.12 -4.29,0.08 -0.65,-0.02 -1.3,-0.05 -1.95,-0.1 -0.38,-0.03 -0.76,-0.06 -1.13,-0.09 -0.88,-0.07 1.26,0.16 -0.13,-0.01 -12.61,-1.62 -24.8,-5.92 -36.45,-10.88 -7.41,-3.15 -14.44,-6.85 -21.59,-10.53 -14.91,-7.69 -30.09,-14.82 -45.18,-22.13 -32.11,-15.57 -64.32,-31.86 -92.41,-54.12 -27.54,-21.82 -50.2,-49.63 -59.01,-84.15 -4.71,-18.44 -6.11,-37.83 -5.13,-56.77 0.46,-8.9 1.54,-17.78 3.31,-26.52 0.22,-1.08 0.45,-2.16 0.69,-3.23 0.3,-1.38 -0.28,1.16 0.05,-0.21 0.13,-0.53 0.26,-1.06 0.39,-1.59 0.53,-2.11 1.09,-4.21 1.7,-6.29 1.21,-4.12 2.58,-8.19 4.11,-12.2 0.71,-1.86 1.46,-3.71 2.25,-5.54 0.42,-0.97 0.85,-1.94 1.28,-2.91 0.76,-1.71 0.04,-0.09 -0.1,0.22 0.29,-0.6 0.57,-1.19 0.86,-1.79 1.85,-3.79 3.86,-7.5 6.02,-11.12 1.01,-1.7 2.06,-3.37 3.13,-5.03 0.25,-0.38 0.55,-0.97 0.87,-1.32 -1.64,1.78 -0.76,1.1 -0.32,0.48 0.68,-0.97 1.36,-1.95 2.05,-2.91 2.49,-3.43 5.11,-6.76 7.87,-9.98 0.61,-0.71 1.23,-1.41 1.84,-2.11 1.54,-1.76 -0.5,0.62 -0.55,0.6 0.03,0.01 0.95,-1.03 1.09,-1.18 1.56,-1.67 3.16,-3.31 4.79,-4.91 1.45,-1.43 2.93,-2.83 4.43,-4.2 0.81,-0.74 1.62,-1.46 2.44,-2.19 0.41,-0.36 0.83,-0.72 1.24,-1.08 1.72,-1.52 -1.48,1.18 -0.26,0.21 3.38,-2.69 6.72,-5.4 10.23,-7.92 1.84,-1.32 3.7,-2.61 5.59,-3.86 0.95,-0.63 1.92,-1.25 2.87,-1.87 0.46,-0.3 1.85,-1.14 -0.31,0.19 0.49,-0.3 0.98,-0.61 1.48,-0.91 8.14,-4.96 16.62,-9.35 25.33,-13.2 1.13,-0.5 2.26,-0.99 3.39,-1.47 -1.83,0.77 1.53,-0.61 1.9,-0.76 2.34,-0.94 4.69,-1.85 7.06,-2.72 4.85,-1.79 9.76,-3.43 14.7,-4.94 9.76,-2.98 17.15,-4.87 26.75,-5.75 3.7,-0.34 7.43,-0.47 11.14,-0.28 0.83,0.04 1.66,0.1 2.49,0.18 -1.43,-0.13 0.28,0.05 0.79,0.12 1.56,0.22 3.12,0.51 4.65,0.89 2.55,0.63 5.05,1.5 7.41,2.67 0.54,0.27 1.06,0.56 1.58,0.85 -1.06,-0.6 -0.39,-0.25 0.23,0.18 0.96,0.68 1.9,1.39 2.77,2.18 1.57,1.43 2.79,3.06 3.99,4.79 0.75,1.07 0,-0.04 0.04,0.03 0.21,0.46 0.45,0.9 0.65,1.37 0.43,0.98 0.78,2 1.07,3.03 0.25,0.92 0.45,1.86 0.6,2.8 0.07,0.44 0.08,0.91 0.17,1.34 0.24,1.09 -0.03,-0.6 -0.03,-0.72 0.01,0.39 0.05,0.78 0.05,1.18 0,2.09 -0.15,4.16 -0.53,6.22 -0.06,0.34 -0.58,2.38 -0.13,0.74 0.45,-1.66 -0.14,0.43 -0.23,0.75 -0.32,1.11 -0.69,2.2 -1.11,3.28 -0.21,0.55 -0.45,1.09 -0.67,1.63 -0.79,1.99 1,-1.94 0.26,-0.55 -0.61,1.14 -1.19,2.29 -1.85,3.41 -0.32,0.53 -0.66,1.05 -0.98,1.58 -1.22,1.99 1.52,-2.05 0.47,-0.69 -0.83,1.07 -1.61,2.17 -2.48,3.21 -0.34,0.41 -2.1,2.38 -0.36,0.45 1.63,-1.81 0.16,-0.19 -0.26,0.24 -0.99,1.01 -2.03,1.95 -3.07,2.91 -1.86,1.72 2.57,-1.99 0.52,-0.46 -0.47,0.36 -0.93,0.73 -1.41,1.09 -0.55,0.41 -1.1,0.81 -1.67,1.2 -0.44,0.3 -2.81,1.84 -0.92,0.64 1.87,-1.19 -0.11,0.04 -0.54,0.29 -0.61,0.35 -1.23,0.69 -1.85,1.01 -0.63,0.33 -1.26,0.64 -1.9,0.95 -0.53,0.25 -2.9,0.99 -1.25,0.58 1.75,-0.43 -0.37,0.13 -0.81,0.29 -0.69,0.25 -1.38,0.5 -2.07,0.72 -1.5,0.49 -3.02,0.92 -4.56,1.28 -0.94,0.22 -1.94,0.38 -0.29,0.09 -0.76,0.13 -1.51,0.27 -2.27,0.38 -1.65,0.24 -3.3,0.4 -4.97,0.5 -9.29,0.53 -18.56,-0.11 -27.64,-1.84 -17.5,-3.34 -34.03,-10.73 -47.31,-22.69 -13.12,-11.83 -22.24,-27.08 -27.09,-44.02 -1.31,-4.59 -2.32,-9.27 -3.05,-13.98 -0.74,-4.8 -1.08,-7.85 -0.97,-12.28 0.11,-4.14 0.63,-8.26 1.52,-12.3 -0.35,1.6 0.21,-0.75 0.33,-1.22 0.28,-1.01 0.58,-2.01 0.9,-3.01 0.69,-2.13 1.47,-4.23 2.35,-6.29 0.16,-0.36 0.34,-0.72 0.48,-1.09 0.52,-1.37 -0.8,1.5 -0.09,0.21 0.51,-0.94 0.95,-1.92 1.46,-2.86 1.08,-2.02 2.28,-3.98 3.5,-5.92 1.1,-1.73 -1.29,1.74 0.42,-0.59 0.65,-0.89 1.29,-1.77 1.97,-2.64 0.59,-0.76 1.2,-1.52 1.81,-2.26 0.35,-0.43 0.72,-0.84 1.07,-1.27 1.79,-2.15 -1.36,1.39 -0.21,0.21 1.57,-1.61 3.1,-3.24 4.75,-4.77 0.72,-0.68 1.47,-1.33 2.21,-1.99 1.69,-1.51 -0.38,0.22 -0.51,0.42 0.31,-0.47 1.21,-0.98 1.67,-1.34 1.7,-1.33 3.44,-2.61 5.22,-3.82 0.7,-0.47 3.34,-2.11 1.16,-0.8 1.13,-0.68 2.26,-1.35 3.41,-1.99 1.94,-1.08 3.91,-2.09 5.91,-3.03 0.42,-0.2 3.6,-1.57 1.68,-0.78 1.25,-0.52 2.52,-1 3.79,-1.47 4.29,-1.56 9.66,-3.09 13.53,-3.81 9,-1.7 19.98,-2.09 29.69,-0.72 11.69,1.64 23.05,5.27 33.69,10.36 11.52,5.5 22.16,12.45 34,17.35 19.35,8.02 40.35,12.38 61.34,11.62 16.91,-0.61 33.42,-4.7 48.93,-11.35 15.07,-6.46 30.6,-15.77 42,-27.78 2.42,-2.56 8.04,-9.06 4.49,-12.74 -3.39,-3.51 -10.62,1.66 -12.89,4.05 -0.92,0.97 -1.92,1.88 -2.91,2.77 -0.51,0.46 -1.04,0.91 -1.56,1.37 -1.59,1.41 2.62,-2.15 1.32,-1.11 -0.43,0.34 -0.84,0.7 -1.26,1.04 -1.65,1.33 -3.33,2.61 -5.05,3.85 -2.07,1.49 -4.3,2.78 -6.35,4.3 -0.02,0.01 2.68,-1.64 1.21,-0.76 -0.3,0.18 -0.59,0.36 -0.88,0.54 -0.6,0.37 -1.21,0.73 -1.82,1.09 -1.36,0.79 -2.73,1.56 -4.12,2.3 -2.91,1.56 -5.89,2.99 -8.9,4.35 -0.38,0.17 -0.77,0.33 -1.16,0.51 0.19,-0.08 2.26,-0.92 0.64,-0.27 -0.81,0.32 -1.61,0.66 -2.42,0.97 -1.78,0.69 -3.57,1.34 -5.37,1.95 -3.7,1.25 -7.46,2.33 -11.27,3.23 -0.96,0.23 -1.93,0.43 -2.9,0.65 -1.62,0.37 -0.34,0.08 -0.01,0.01 -0.5,0.1 -1,0.19 -1.5,0.28 -2.3,0.41 -4.6,0.76 -6.92,1.04 -8.89,1.08 -18.29,1.23 -26.98,0.37 -24.15,-2.4 -46.14,-12.11 -67.05,-23.91 -20.77,-11.72 -44.99,-17.84 -68.85,-15.16 -22.51,2.53 -43.31,12.21 -60.43,26.91 -15,12.87 -27.27,30.41 -32,49.78 -4.62,18.95 -1.47,39.2 5.96,57.06 7.07,17.01 18.51,32.03 33.64,42.62 16.33,11.43 35.14,17.36 54.89,19.14 16.08,1.45 31.94,0 46.28,-7.93 12.38,-6.85 23.37,-17.22 30.06,-29.77 5.04,-9.46 8.41,-21.1 5.11,-31.71 -3.15,-10.11 -11.98,-16.54 -21.99,-19.01 -17.07,-4.22 -35.66,-0.15 -52.11,4.75 -20.17,6.01 -39.93,14.17 -58,25.03 -34.1,20.5 -62.12,49.8 -77.72,86.69 -15.04,35.59 -17.12,77.15 -9.02,114.72 7.89,36.58 30.89,67.06 59.53,90.29 29.31,23.78 63.37,41.08 97.17,57.48 15.66,7.6 31.42,14.98 46.87,23 7.4,3.84 14.74,7.58 22.45,10.77 12.53,5.18 25.68,9.54 39.29,10.45 16.16,1.08 32.99,-7.92 37.94,-24.12 3.4,-11.13 1.08,-23.99 -7.32,-32.32 -8.3,-8.23 -20.18,-11.22 -31.5,-11.91 -33.43,-2.02 -66.97,17.37 -89.15,41.01 -29.67,31.63 -50.28,78.37 -39.45,122.1 3.25,13.13 9.94,27.81 21.54,35.61 4.79,3.22 10.15,5.4 16.05,4.93 7.76,-0.62 14.87,-5.07 20.19,-10.54 16.27,-16.72 17.69,-43.21 15.64,-65.17 -2.35,-25.23 -11.85,-49.77 -27.39,-69.82 -21.16,-27.3 -52.94,-44.13 -86.03,-52.33 -5.08,-1.26 -10.21,-2.34 -15.37,-3.24 -4.24,-0.75 -9.14,-2.11 -13.44,-1.89 -4.86,0.25 -9.92,2.09 -14.29,4.09 -8.47,3.87 -16.27,11.31 -19.46,20.16 -2.87,7.94 -1.02,16.62 3.19,23.71 4.47,7.53 12.82,12.27 20.85,15.17 10.56,3.8 22.27,4.92 33.42,4.24 29.03,-1.77 57.21,-16.53 74.34,-40.2 10.32,-14.25 16.5,-30.73 18.68,-48.17 1.45,-11.6 0.92,-23.36 0.38,-35.01 -1.15,-25 -3.24,-49.95 -5.22,-74.89 -2.45,-30.68 -4.94,-61.36 -7,-92.07 0.06,0.91 -0.09,-1.32 -0.12,-1.8 -0.07,-0.98 -0.13,-1.97 -0.19,-2.95 -0.14,-2.09 -0.27,-4.19 -0.4,-6.28 -0.26,-4.08 -0.51,-8.15 -0.75,-12.23 -0.48,-8.17 -0.93,-16.34 -1.32,-24.52 -0.79,-16.29 -1.4,-32.58 -1.73,-48.89 -0.6,-29.76 -0.42,-59.62 2.15,-89.29 1.07,-12.4 2.58,-24.78 4.93,-37 0.26,-1.34 0.53,-2.69 0.81,-4.03 0.14,-0.66 0.28,-1.32 0.42,-1.97 0.15,-0.68 0.82,-3.46 0.15,-0.71 0.61,-2.48 1.21,-4.97 1.9,-7.43 1.32,-4.74 2.83,-9.42 4.66,-13.99 0.38,-0.95 0.77,-1.89 1.18,-2.82 0.21,-0.49 0.44,-0.97 0.65,-1.46 0.57,-1.33 -0.66,1.4 -0.61,1.31 0.19,-0.33 0.33,-0.71 0.5,-1.05 0.92,-1.84 1.86,-3.66 2.91,-5.42 0.48,-0.81 1.01,-1.6 1.5,-2.41 1.07,-1.73 -1.9,2.61 -0.68,1.01 0.31,-0.4 0.59,-0.83 0.9,-1.24 0.53,-0.71 1.07,-1.4 1.64,-2.08 0.28,-0.33 0.57,-0.65 0.84,-0.98 1.02,-1.26 -2.76,2.86 -0.97,1.1 0.59,-0.58 1.18,-1.16 1.78,-1.74 2.12,-2.03 -2.82,2.1 -0.26,0.22 0.64,-0.47 1.29,-0.92 1.92,-1.38 1.65,-1.2 -2.61,1.47 -1.26,0.79 0.39,-0.2 0.75,-0.44 1.14,-0.64 0.67,-0.36 1.42,-0.63 2.07,-1.01 -2.81,1.64 -1.36,0.54 0.14,0.05 0.74,-0.24 1.48,-0.42 2.23,-0.62 1.61,-0.43 -0.18,0.37 -0.78,0.14 0.3,0.11 1.13,-0.18 1.46,-0.22 1.61,-0.21 3.23,-0.28 4.85,-0.23 0.99,0.03 3.27,0.43 0.98,0.01 0.98,0.18 1.98,0.27 2.96,0.45 6.55,1.26 13.13,3.41 19.01,6.58 0.36,0.19 2.12,1.24 0.98,0.53 0.61,0.38 1.2,0.76 1.79,1.17 1.19,0.82 2.34,1.71 3.43,2.66 1.97,1.72 3.75,3.67 5.24,5.82 0.35,0.5 0.67,1.02 1,1.54 0.93,1.45 -0.09,-0.32 0.3,0.53 0.54,1.17 1.08,2.33 1.51,3.54 0.85,2.41 1.4,4.91 1.69,7.45 0.09,0.75 0.12,2.12 0.07,0.51 0.02,0.66 0.05,1.31 0.06,1.96 0.01,1.52 -0.05,3.05 -0.18,4.56 -0.25,2.9 -0.79,5.73 -1.37,8.58 0.49,-2.41 -0.02,0 -0.18,0.6 -0.2,0.76 -0.41,1.52 -0.64,2.27 -0.52,1.76 -1.09,3.5 -1.7,5.23 -1.2,3.39 -2.59,6.71 -4.04,9.99 -1.03,2.33 0.61,-1.23 -0.19,0.43 -0.41,0.84 -0.81,1.69 -1.22,2.53 -0.96,1.94 -1.95,3.87 -2.96,5.77 -1.96,3.68 -4.03,7.31 -6.18,10.9 -2.27,3.8 -4.63,7.54 -7.04,11.25 -0.6,0.93 -1.21,1.85 -1.83,2.77 -0.42,0.63 -2.32,3.44 -0.69,1.05 -1.37,2 -2.74,4 -4.13,5.99 -23.61,33.69 -50.6,64.91 -76.93,96.46 -26.82,32.14 -54.8,64.65 -66.82,105.64 -9.95,33.91 -7.63,70.79 14.62,99.44 11.4,14.68 26.93,25.66 43.57,33.69 18.51,8.93 39.39,15.36 60.09,15.39 34.27,0.04 63.16,-21.33 80.13,-50 11.13,-18.81 19.32,-42.25 17.56,-64.37 -2.39,-30.09 -22.08,-60.81 -50.83,-71.78 -41.74,-15.93 -82.26,17.21 -106.98,47.48 -2.03,2.49 -5.83,9.51 -0.91,11.21 4.83,1.69 10.92,-4.03 13.58,-7.28 z"
             id="path1111-5-5-8-3-6"
             style="fill:#010202;fill-opacity:1;fill-rule:nonzero" />
        </g>
      </g>
      <g
         id="g1121-9-6-7-7-5"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero">
        <g
           id="g1119-2-9-1-5-6"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero">
          <path
             class="st0"
             d="m 450.93,194.12 c -0.03,2.56 -0.05,5.12 -0.08,7.68 -0.07,6.91 -0.14,13.81 -0.21,20.72 -0.1,10.28 -0.21,20.56 -0.31,30.84 -0.13,12.46 -0.25,24.91 -0.38,37.37 -0.14,13.74 -0.28,27.47 -0.41,41.21 -0.14,13.77 -0.28,27.54 -0.42,41.31 -0.13,12.93 -0.26,25.86 -0.39,38.78 -0.11,10.85 -0.22,21.7 -0.33,32.55 -0.08,7.86 -0.16,15.71 -0.24,23.57 -0.04,3.7 -0.1,7.4 -0.11,11.09 0,0.16 0,0.32 0,0.48 -0.02,1.85 0.42,3.52 2.36,4.19 1.96,0.68 4.84,-0.35 6.5,-1.26 2.71,-1.49 5.27,-3.54 7.12,-6.03 1.46,-1.96 3.24,-4.48 3.27,-7.01 0.03,-2.56 0.05,-5.12 0.08,-7.68 0.07,-6.91 0.14,-13.81 0.21,-20.72 0.1,-10.28 0.21,-20.56 0.31,-30.84 0.13,-12.46 0.25,-24.91 0.38,-37.37 0.14,-13.74 0.28,-27.47 0.41,-41.21 0.14,-13.77 0.28,-27.54 0.42,-41.31 0.13,-12.93 0.26,-25.86 0.39,-38.78 0.11,-10.85 0.22,-21.7 0.33,-32.55 0.08,-7.86 0.16,-15.71 0.24,-23.57 0.04,-3.7 0.1,-7.4 0.11,-11.09 0,-0.16 0,-0.32 0,-0.49 0.02,-1.85 -0.42,-3.52 -2.36,-4.19 -1.96,-0.68 -4.84,0.35 -6.5,1.26 -2.71,1.49 -5.27,3.54 -7.12,6.03 -1.46,1.97 -3.25,4.49 -3.27,7.02 z"
             id="path1117-2-3-7-9-9"
             style="fill:#010202;fill-opacity:1;fill-rule:nonzero" />
        </g>
      </g>
      <g
         id="g1125-8-7-2-2-3"
         style="fill:#010202;fill-opacity:1;fill-rule:nonzero">
        <path
           class="st0"
           d="m 457.67,541.7 c -6.67,0 -12.08,-5.41 -12.08,-12.08 v -4.58 c 0,-6.67 5.41,-12.08 12.08,-12.08 6.67,0 12.08,5.41 12.08,12.08 v 4.58 c 0.01,6.67 -5.4,12.08 -12.08,12.08 z"
           id="path1123-9-4-7-2-7"
           style="fill:#010202;fill-opacity:1;fill-rule:nonzero" />
      </g>
    </g>
    <path
       id="path980-6-7-8-4"
       style="clip-rule:evenodd;fill-rule:evenodd;stroke-width:1.00987;stroke-linejoin:round;stroke-miterlimit:2"
       d="M 3.8522396,2.7493121 V 164.73785 c 0,55.68401 45.3014084,100.98694 100.9854304,100.98694 55.68405,0 100.98684,-45.30293 100.98684,-100.98694 V 2.7493121 Z M 7.8906785,6.789269 H 201.78453 v 32.01635 H 7.8906785 Z m 0,36.054791 H 102.81839 v 91.89817 H 7.8906785 Z m 98.9676715,0 c -0.0343,0.08277 94.92618,0.0054 94.92618,0.0054 v 121.88828 c 0,52.78064 -42.39794,95.84339 -94.92618,96.92036 z M 7.8906785,138.78217 H 102.81839 V 261.65818 C 50.290173,260.5773 7.8906785,217.51849 7.8906785,164.73785 Z"
       sodipodi:nodetypes="csssccccccccccccccscccccsc" />
    <script
       id="mesh_polyfill"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
  </g>
  <script
     id="script2626"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
  <script
     id="script423"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
